"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[42972],{15680:(e,t,a)=>{a.d(t,{xA:()=>p,yg:()=>c});var r=a(96540);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),u=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(a),y=n,c=m["".concat(o,".").concat(y)]||m[y]||d[y]||i;return a?r.createElement(c,l(l({ref:t},p),{},{components:a})):r.createElement(c,l({ref:t},p))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=y;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[m]="string"==typeof e?e:n,l[1]=s;for(var u=2;u<i;u++)l[u]=a[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}y.displayName="MDXCreateElement"},16120:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>u,toc:()=>m});a(96540);var r=a(15680);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))})),e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}const s={sidebar_position:20,title:"ML Feature Table",slug:"/generated/metamodel/entities/mlfeaturetable-datahub",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/mlFeatureTable-datahub.md"},o="ML Feature Table",u={unversionedId:"docs/generated/metamodel/entities/mlFeatureTable-datahub",id:"docs/generated/metamodel/entities/mlFeatureTable-datahub",title:"ML Feature Table",description:"The ML Feature Table entity represents a collection of related machine learning features organized together in a feature store. Feature tables are fundamental building blocks in the ML feature management ecosystem, grouping features that share common characteristics such as the same primary keys, update cadence, or data source. They bridge the gap between raw data in data warehouses and the features consumed by ML models during training and inference.",source:"@site/genDocs/docs/generated/metamodel/entities/mlFeatureTable-datahub.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/mlfeaturetable-datahub",permalink:"/docs/generated/metamodel/entities/mlfeaturetable-datahub",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/mlFeatureTable-datahub.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20,title:"ML Feature Table",slug:"/generated/metamodel/entities/mlfeaturetable-datahub",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/mlFeatureTable-datahub.md"},sidebar:"overviewSidebar",previous:{title:"ML Model Deployment",permalink:"/docs/generated/metamodel/entities/mlmodeldeployment"},next:{title:"ML Feature Table",permalink:"/docs/generated/metamodel/entities/mlfeaturetable"}},p={},m=[{value:"Identity",id:"identity",level:2},{value:"Important Capabilities",id:"important-capabilities",level:2},{value:"Feature Table Properties",id:"feature-table-properties",level:3},{value:"Description and Documentation",id:"description-and-documentation",level:4},{value:"Features",id:"features",level:4},{value:"Primary Keys",id:"primary-keys",level:4},{value:"Custom Properties",id:"custom-properties",level:4},{value:"Primary Key Properties",id:"primary-key-properties",level:3},{value:"Data Type",id:"data-type",level:4},{value:"Source Lineage",id:"source-lineage",level:4},{value:"Versioning",id:"versioning",level:4},{value:"Tags and Glossary Terms",id:"tags-and-glossary-terms",level:3},{value:"Ownership",id:"ownership",level:3},{value:"Domains and Organization",id:"domains-and-organization",level:3},{value:"Code Examples",id:"code-examples",level:2},{value:"Creating a Complete ML Feature Table",id:"creating-a-complete-ml-feature-table",level:3},{value:"Querying ML Feature Tables",id:"querying-ml-feature-tables",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"Relationships with ML Features",id:"relationships-with-ml-features",level:3},{value:"Relationships with ML Primary Keys",id:"relationships-with-ml-primary-keys",level:3},{value:"Relationships with ML Models",id:"relationships-with-ml-models",level:3},{value:"Relationships with Datasets",id:"relationships-with-datasets",level:3},{value:"Platform Integration",id:"platform-integration",level:3},{value:"Notable Exceptions",id:"notable-exceptions",level:2},{value:"Feature Store Platform Variations",id:"feature-store-platform-variations",level:3},{value:"Custom Properties Usage",id:"custom-properties-usage",level:3},{value:"Entity References vs. Entity Creation",id:"entity-references-vs-entity-creation",level:3},{value:"Lineage Considerations",id:"lineage-considerations",level:3},{value:"Technical Reference",id:"technical-reference",level:2}],d={toc:m},y="wrapper";function c(e){var{components:t}=e,a=l(e,["components"]);return(0,r.yg)(y,i(function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},r=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),r.forEach((function(t){n(e,t,a[t])}))}return e}({},d,a),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"ml-feature-table"},"ML Feature Table"),(0,r.yg)("p",null,"The ML Feature Table entity represents a collection of related machine learning features organized together in a feature store. Feature tables are fundamental building blocks in the ML feature management ecosystem, grouping features that share common characteristics such as the same primary keys, update cadence, or data source. They bridge the gap between raw data in data warehouses and the features consumed by ML models during training and inference."),(0,r.yg)("h2",{id:"identity"},"Identity"),(0,r.yg)("p",null,"ML Feature Tables are identified by two pieces of information:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"The platform that hosts the feature table: this is the specific feature store or ML platform technology. Examples include ",(0,r.yg)("inlineCode",{parentName:"li"},"feast"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"tecton"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"sagemaker"),", etc. See ",(0,r.yg)("a",{parentName:"li",href:"/docs/generated/metamodel/entities/dataplatform"},"dataplatform")," for more details."),(0,r.yg)("li",{parentName:"ul"},"The name of the feature table: a unique identifier within the specific platform that represents this collection of features.")),(0,r.yg)("p",null,"An example of an ML Feature Table identifier is ",(0,r.yg)("inlineCode",{parentName:"p"},"urn:li:mlFeatureTable:(urn:li:dataPlatform:feast,users_feature_table)"),"."),(0,r.yg)("p",null,"The identity is defined by the ",(0,r.yg)("inlineCode",{parentName:"p"},"mlFeatureTableKey")," aspect, which contains:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"platform"),": A URN reference to the data platform hosting the feature table"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"name"),": The unique name of the feature table within that platform")),(0,r.yg)("h2",{id:"important-capabilities"},"Important Capabilities"),(0,r.yg)("h3",{id:"feature-table-properties"},"Feature Table Properties"),(0,r.yg)("p",null,"ML Feature Tables support comprehensive metadata through the ",(0,r.yg)("inlineCode",{parentName:"p"},"mlFeatureTableProperties")," aspect. This aspect captures the essential characteristics of the feature table:"),(0,r.yg)("h4",{id:"description-and-documentation"},"Description and Documentation"),(0,r.yg)("p",null,"Feature tables can have detailed descriptions explaining their purpose, the type of features they contain, and when they should be used. This documentation helps data scientists and ML engineers discover and understand feature tables in their organization."),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Python SDK: Create an ML Feature Table with properties"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'import datahub.emitter.mce_builder as builder\nimport datahub.metadata.schema_classes as models\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\n\ngms_endpoint = "http://localhost:8080"\nemitter = DatahubRestEmitter(gms_server=gms_endpoint, extra_headers={})\n\nfeature_table_urn = builder.make_ml_feature_table_urn(\n    feature_table_name="customer_features", platform="feast"\n)\n\nfeature_table_properties = models.MLFeatureTablePropertiesClass(\n    description="Customer demographic and behavioral features for churn prediction models. "\n    "Updated daily from the customer data warehouse.",\n    customProperties={\n        "update_frequency": "daily",\n        "feature_count": "25",\n        "team": "customer-analytics",\n        "sla_hours": "24",\n    },\n)\n\nmetadata_change_proposal = MetadataChangeProposalWrapper(\n    entityUrn=feature_table_urn,\n    aspect=feature_table_properties,\n)\n\nemitter.emit(metadata_change_proposal)\n\n'))),(0,r.yg)("h4",{id:"features"},"Features"),(0,r.yg)("p",null,"The most important property of a feature table is the collection of features it contains. Feature tables maintain explicit relationships to their constituent features through the ",(0,r.yg)("inlineCode",{parentName:"p"},"mlFeatures"),' property. This creates a "Contains" relationship between the feature table and each individual feature, enabling:'),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Discovery of all features in a table"),(0,r.yg)("li",{parentName:"ul"},"Navigation from feature table to individual features"),(0,r.yg)("li",{parentName:"ul"},"Understanding of feature organization and grouping")),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Python SDK: Add features to a feature table"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'import datahub.emitter.mce_builder as builder\nimport datahub.metadata.schema_classes as models\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.ingestion.graph.client import DatahubClientConfig, DataHubGraph\n\ngms_endpoint = "http://localhost:8080"\nemitter = DatahubRestEmitter(gms_server=gms_endpoint, extra_headers={})\n\nfeature_table_urn = builder.make_ml_feature_table_urn(\n    feature_table_name="customer_features", platform="feast"\n)\n\nnew_feature_urns = [\n    builder.make_ml_feature_urn(\n        feature_name="customer_lifetime_value",\n        feature_table_name="customer_features",\n    ),\n    builder.make_ml_feature_urn(\n        feature_name="days_since_last_purchase",\n        feature_table_name="customer_features",\n    ),\n    builder.make_ml_feature_urn(\n        feature_name="total_purchase_count",\n        feature_table_name="customer_features",\n    ),\n]\n\n# Read existing features to avoid overwriting them\ngraph = DataHubGraph(DatahubClientConfig(server=gms_endpoint))\nfeature_table_properties = graph.get_aspect(\n    entity_urn=feature_table_urn,\n    aspect_type=models.MLFeatureTablePropertiesClass,\n)\n\nif feature_table_properties and feature_table_properties.mlFeatures:\n    existing_features = feature_table_properties.mlFeatures\n    all_feature_urns = list(set(existing_features + new_feature_urns))\nelse:\n    all_feature_urns = new_feature_urns\n\nupdated_properties = models.MLFeatureTablePropertiesClass(\n    mlFeatures=all_feature_urns,\n    description="Customer features with newly added purchase metrics",\n)\n\nmetadata_change_proposal = MetadataChangeProposalWrapper(\n    entityUrn=feature_table_urn,\n    aspect=updated_properties,\n)\n\nemitter.emit(metadata_change_proposal)\n\n'))),(0,r.yg)("h4",{id:"primary-keys"},"Primary Keys"),(0,r.yg)("p",null,"Feature tables define one or more primary keys that uniquely identify each row in the table. These primary keys are critical for:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Joining features with training datasets"),(0,r.yg)("li",{parentName:"ul"},"Looking up feature values during model inference"),(0,r.yg)("li",{parentName:"ul"},"Understanding the entity granularity of the features (e.g., user-level, transaction-level)")),(0,r.yg)("p",null,"When multiple primary keys are specified, they act as a composite key. The ",(0,r.yg)("inlineCode",{parentName:"p"},"mlPrimaryKeys"),' property creates a "KeyedBy" relationship to each primary key entity.'),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Python SDK: Add primary keys to a feature table"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'import datahub.emitter.mce_builder as builder\nimport datahub.metadata.schema_classes as models\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.ingestion.graph.client import DatahubClientConfig, DataHubGraph\n\ngms_endpoint = "http://localhost:8080"\nemitter = DatahubRestEmitter(gms_server=gms_endpoint, extra_headers={})\n\nfeature_table_urn = builder.make_ml_feature_table_urn(\n    feature_table_name="customer_features", platform="feast"\n)\n\nprimary_key_urns = [\n    builder.make_ml_primary_key_urn(\n        feature_table_name="customer_features",\n        primary_key_name="customer_id",\n    )\n]\n\n# Read existing properties to preserve other fields\ngraph = DataHubGraph(DatahubClientConfig(server=gms_endpoint))\nfeature_table_properties = graph.get_aspect(\n    entity_urn=feature_table_urn,\n    aspect_type=models.MLFeatureTablePropertiesClass,\n)\n\nif feature_table_properties:\n    feature_table_properties.mlPrimaryKeys = primary_key_urns\n    updated_properties = feature_table_properties\nelse:\n    updated_properties = models.MLFeatureTablePropertiesClass(\n        mlPrimaryKeys=primary_key_urns,\n    )\n\nmetadata_change_proposal = MetadataChangeProposalWrapper(\n    entityUrn=feature_table_urn,\n    aspect=updated_properties,\n)\n\nemitter.emit(metadata_change_proposal)\n\n# Also create the primary key entity with its properties\ndataset_urn = builder.make_dataset_urn(\n    name="customers", platform="snowflake", env="PROD"\n)\nprimary_key_urn = primary_key_urns[0]\n\nprimary_key_properties = models.MLPrimaryKeyPropertiesClass(\n    description="Unique identifier for customers in the system",\n    dataType="TEXT",\n    sources=[dataset_urn],\n)\n\npk_metadata_change_proposal = MetadataChangeProposalWrapper(\n    entityUrn=primary_key_urn,\n    aspect=primary_key_properties,\n)\n\nemitter.emit(pk_metadata_change_proposal)\n\n'))),(0,r.yg)("h4",{id:"custom-properties"},"Custom Properties"),(0,r.yg)("p",null,"Feature tables support custom properties through the ",(0,r.yg)("inlineCode",{parentName:"p"},"customProperties")," field, allowing you to capture platform-specific or organization-specific metadata that doesn't fit into the standard schema. This might include information like:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Update frequency or freshness SLAs"),(0,r.yg)("li",{parentName:"ul"},"Feature store configuration settings"),(0,r.yg)("li",{parentName:"ul"},"Cost or resource usage information"),(0,r.yg)("li",{parentName:"ul"},"Team or project ownership details")),(0,r.yg)("h3",{id:"primary-key-properties"},"Primary Key Properties"),(0,r.yg)("p",null,"While primary keys are referenced from feature tables, they are separate entities with their own properties defined in the ",(0,r.yg)("inlineCode",{parentName:"p"},"mlPrimaryKeyProperties")," aspect. Understanding primary key metadata is essential for proper feature table usage:"),(0,r.yg)("h4",{id:"data-type"},"Data Type"),(0,r.yg)("p",null,"Primary keys have a data type (defined using ",(0,r.yg)("inlineCode",{parentName:"p"},"MLFeatureDataType"),") that specifies the type of values:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"ORDINAL"),": Integer values"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"NOMINAL"),": Categorical values"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"BINARY"),": Boolean values"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"COUNT"),": Count values"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"TIME"),": Timestamp values"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"TEXT"),": String values"),(0,r.yg)("li",{parentName:"ul"},"Other numeric types like ",(0,r.yg)("inlineCode",{parentName:"li"},"CONTINUOUS"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"INTERVAL"))),(0,r.yg)("h4",{id:"source-lineage"},"Source Lineage"),(0,r.yg)("p",null,"Primary keys can declare their source datasets through the ",(0,r.yg)("inlineCode",{parentName:"p"},"sources")," property. This creates lineage relationships showing which upstream datasets the primary key values are derived from. This is crucial for understanding data provenance and impact analysis."),(0,r.yg)("h4",{id:"versioning"},"Versioning"),(0,r.yg)("p",null,"Primary keys support versioning through the ",(0,r.yg)("inlineCode",{parentName:"p"},"version")," property, allowing teams to track changes to key definitions over time and maintain multiple versions in parallel."),(0,r.yg)("h3",{id:"tags-and-glossary-terms"},"Tags and Glossary Terms"),(0,r.yg)("p",null,"Like other DataHub entities, ML Feature Tables support tags and glossary terms for classification and discovery:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Tags (via ",(0,r.yg)("inlineCode",{parentName:"li"},"globalTags")," aspect) provide lightweight categorization"),(0,r.yg)("li",{parentName:"ul"},"Glossary Terms (via ",(0,r.yg)("inlineCode",{parentName:"li"},"glossaryTerms")," aspect) link to business definitions and concepts")),(0,r.yg)("p",null,"Read ",(0,r.yg)("a",{parentName:"p",href:"https://medium.com/datahub-project/tags-and-terms-two-powerful-datahub-features-used-in-two-different-scenarios-b5b4791e892e"},"this blog")," to understand when to use tags vs terms."),(0,r.yg)("h3",{id:"ownership"},"Ownership"),(0,r.yg)("p",null,"Ownership is associated with feature tables using the ",(0,r.yg)("inlineCode",{parentName:"p"},"ownership")," aspect. Owners can be individuals or teams responsible for maintaining the feature table. Clear ownership is essential for:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Knowing who to contact with questions about features"),(0,r.yg)("li",{parentName:"ul"},"Understanding responsibility for feature quality and updates"),(0,r.yg)("li",{parentName:"ul"},"Governance and access control decisions")),(0,r.yg)("h3",{id:"domains-and-organization"},"Domains and Organization"),(0,r.yg)("p",null,"Feature tables can be organized into domains (via the ",(0,r.yg)("inlineCode",{parentName:"p"},"domains")," aspect) to represent organizational structure or functional areas. This helps teams manage large feature catalogs by grouping related feature tables together."),(0,r.yg)("h2",{id:"code-examples"},"Code Examples"),(0,r.yg)("h3",{id:"creating-a-complete-ml-feature-table"},"Creating a Complete ML Feature Table"),(0,r.yg)("p",null,"Here's a comprehensive example that creates a feature table with all core aspects:"),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Python SDK: Create a complete ML Feature Table"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'import datahub.emitter.mce_builder as builder\nimport datahub.metadata.schema_classes as models\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\n\ngms_endpoint = "http://localhost:8080"\nemitter = DatahubRestEmitter(gms_server=gms_endpoint, extra_headers={})\n\n# Step 1: Create the source dataset for lineage\ndataset_urn = builder.make_dataset_urn(\n    name="customer_transactions", platform="snowflake", env="PROD"\n)\n\n# Step 2: Create the primary key entity\nprimary_key_urn = builder.make_ml_primary_key_urn(\n    feature_table_name="transaction_features",\n    primary_key_name="transaction_id",\n)\n\nprimary_key_properties = models.MLPrimaryKeyPropertiesClass(\n    description="Unique identifier for each transaction",\n    dataType="TEXT",\n    sources=[dataset_urn],\n)\n\nemitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=primary_key_urn,\n        aspect=primary_key_properties,\n    )\n)\n\n# Step 3: Create the feature entities\nfeature_1_urn = builder.make_ml_feature_urn(\n    feature_name="transaction_amount",\n    feature_table_name="transaction_features",\n)\n\nemitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=feature_1_urn,\n        aspect=models.MLFeaturePropertiesClass(\n            description="Total amount of the transaction in USD",\n            dataType="CONTINUOUS",\n            sources=[dataset_urn],\n        ),\n    )\n)\n\nfeature_2_urn = builder.make_ml_feature_urn(\n    feature_name="is_fraud",\n    feature_table_name="transaction_features",\n)\n\nemitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=feature_2_urn,\n        aspect=models.MLFeaturePropertiesClass(\n            description="Binary indicator of fraudulent transaction",\n            dataType="BINARY",\n            sources=[dataset_urn],\n        ),\n    )\n)\n\n# Step 4: Create the feature table with all properties\nfeature_table_urn = builder.make_ml_feature_table_urn(\n    feature_table_name="transaction_features", platform="feast"\n)\n\nfeature_table_properties = models.MLFeatureTablePropertiesClass(\n    description="Real-time transaction features for fraud detection models",\n    mlFeatures=[feature_1_urn, feature_2_urn],\n    mlPrimaryKeys=[primary_key_urn],\n    customProperties={\n        "update_frequency": "real-time",\n        "team": "fraud-detection",\n        "critical": "true",\n    },\n)\n\nemitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=feature_table_urn,\n        aspect=feature_table_properties,\n    )\n)\n\n# Step 5: Add tags for categorization\nemitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=feature_table_urn,\n        aspect=models.GlobalTagsClass(\n            tags=[\n                models.TagAssociationClass(tag=builder.make_tag_urn("Fraud Detection")),\n                models.TagAssociationClass(\n                    tag=builder.make_tag_urn("Real-time Features")\n                ),\n            ]\n        ),\n    )\n)\n\n# Step 6: Add ownership\nemitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=feature_table_urn,\n        aspect=models.OwnershipClass(\n            owners=[\n                models.OwnerClass(\n                    owner=builder.make_user_urn("data_science_team"),\n                    type=models.OwnershipTypeClass.DATAOWNER,\n                )\n            ]\n        ),\n    )\n)\n\nprint(f"Successfully created feature table: {feature_table_urn}")\n\n'))),(0,r.yg)("h3",{id:"querying-ml-feature-tables"},"Querying ML Feature Tables"),(0,r.yg)("p",null,"You can retrieve ML Feature Table metadata using both the Python SDK and REST API:"),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Python SDK: Read an ML Feature Table"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from datahub.sdk import DataHubClient, MLFeatureTableUrn\n\nclient = DataHubClient.from_env()\n\n# Or get this from the UI (share -> copy urn) and use MLFeatureTableUrn.from_string(...)\nmlfeature_table_urn = MLFeatureTableUrn(\n    "feast", "test_feature_table_all_feature_dtypes"\n)\n\nmlfeature_table_entity = client.entities.get(mlfeature_table_urn)\nprint("MLFeature Table name:", mlfeature_table_entity.name)\nprint("MLFeature Table platform:", mlfeature_table_entity.platform)\nprint("MLFeature Table description:", mlfeature_table_entity.description)\n\n'))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"REST API: Fetch ML Feature Table metadata"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"# Get the complete entity with all aspects\ncurl 'http://localhost:8080/entities/urn%3Ali%3AmlFeatureTable%3A(urn%3Ali%3AdataPlatform%3Afeast,users_feature_table)'\n\n# Get relationships to see features and primary keys\ncurl 'http://localhost:8080/relationships?direction=OUTGOING&urn=urn%3Ali%3AmlFeatureTable%3A(urn%3Ali%3AdataPlatform%3Afeast,users_feature_table)&types=Contains,KeyedBy'\n"))),(0,r.yg)("h2",{id:"integration-points"},"Integration Points"),(0,r.yg)("p",null,"ML Feature Tables integrate with multiple other entities in DataHub's metadata model:"),(0,r.yg)("h3",{id:"relationships-with-ml-features"},"Relationships with ML Features"),(0,r.yg)("p",null,'Feature tables contain ML Features through the "Contains" relationship. Each feature in the ',(0,r.yg)("inlineCode",{parentName:"p"},"mlFeatures")," array represents an individual feature that can be:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Used independently by ML models"),(0,r.yg)("li",{parentName:"ul"},"Have its own metadata, lineage, and documentation"),(0,r.yg)("li",{parentName:"ul"},"Shared across multiple feature tables in some feature store implementations")),(0,r.yg)("p",null,"Navigation works bidirectionally - from feature table to features, and from features back to their parent tables."),(0,r.yg)("h3",{id:"relationships-with-ml-primary-keys"},"Relationships with ML Primary Keys"),(0,r.yg)("p",null,'Feature tables reference ML Primary Keys through the "KeyedBy" relationship. Primary keys:'),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Define the entity granularity of the feature table"),(0,r.yg)("li",{parentName:"ul"},"Enable joining features with entity identifiers in training datasets"),(0,r.yg)("li",{parentName:"ul"},"Can be shared across multiple feature tables when they represent the same entity type"),(0,r.yg)("li",{parentName:"ul"},"Have their own lineage to upstream datasets through the ",(0,r.yg)("inlineCode",{parentName:"li"},"sources")," property")),(0,r.yg)("h3",{id:"relationships-with-ml-models"},"Relationships with ML Models"),(0,r.yg)("p",null,"While not directly referenced in feature table metadata, ML Models consume features through the ",(0,r.yg)("inlineCode",{parentName:"p"},"mlFeatures")," property in ",(0,r.yg)("inlineCode",{parentName:"p"},"MLModelProperties"),'. This creates a "Consumes" lineage relationship showing which models use features from a particular feature table. This lineage enables:'),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Understanding downstream impact when feature tables change"),(0,r.yg)("li",{parentName:"ul"},"Discovering which models depend on specific feature tables"),(0,r.yg)("li",{parentName:"ul"},"Tracking feature usage and adoption across models")),(0,r.yg)("h3",{id:"relationships-with-datasets"},"Relationships with Datasets"),(0,r.yg)("p",null,"Feature tables have indirect relationships to datasets through two paths:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Via ML Features"),": Individual features can declare source datasets through their ",(0,r.yg)("inlineCode",{parentName:"li"},"sources"),' property, creating "DerivedFrom" lineage'),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Via ML Primary Keys"),": Primary keys can declare source datasets, showing where entity identifiers originate")),(0,r.yg)("p",null,"This lineage connects the feature store to upstream data warehouses, enabling end-to-end data lineage from raw data to model predictions."),(0,r.yg)("h3",{id:"platform-integration"},"Platform Integration"),(0,r.yg)("p",null,"Feature tables are associated with a specific data platform (e.g., Feast, Tecton) through the ",(0,r.yg)("inlineCode",{parentName:"p"},"platform"),' property in the key aspect. This creates a "SourcePlatform" relationship that:'),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Identifies which feature store system hosts the feature table"),(0,r.yg)("li",{parentName:"ul"},"Enables filtering and organization by platform"),(0,r.yg)("li",{parentName:"ul"},"Supports multi-platform feature store environments")),(0,r.yg)("h2",{id:"notable-exceptions"},"Notable Exceptions"),(0,r.yg)("h3",{id:"feature-store-platform-variations"},"Feature Store Platform Variations"),(0,r.yg)("p",null,"Different feature store platforms have different capabilities and concepts:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Feast"),': Uses the term "feature table" directly. Feature tables in Feast correspond 1:1 with this entity.'),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Tecton"),': Uses "feature views" and "feature services" as similar concepts. These can be modeled as feature tables.'),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"SageMaker Feature Store"),': Uses "feature groups" which map to feature tables.'),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Databricks Feature Store"),': Uses "feature tables" but with database.schema.table naming patterns.')),(0,r.yg)("p",null,"When ingesting from these platforms, ensure the naming conventions match the platform's terminology for consistency."),(0,r.yg)("h3",{id:"custom-properties-usage"},"Custom Properties Usage"),(0,r.yg)("p",null,"Unlike datasets which have both ",(0,r.yg)("inlineCode",{parentName:"p"},"datasetProperties")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"editableDatasetProperties"),", feature tables have:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"mlFeatureTableProperties"),": The main properties aspect (usually from ingestion)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"editableMlFeatureTableProperties"),": UI-editable description only")),(0,r.yg)("p",null,"For custom metadata, use the ",(0,r.yg)("inlineCode",{parentName:"p"},"customProperties")," map in ",(0,r.yg)("inlineCode",{parentName:"p"},"mlFeatureTableProperties")," rather than creating custom aspects."),(0,r.yg)("h3",{id:"entity-references-vs-entity-creation"},"Entity References vs. Entity Creation"),(0,r.yg)("p",null,"When using the SDK to create feature tables:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"You ",(0,r.yg)("strong",{parentName:"li"},"must create the referenced entities first"),": Create individual ML Features and ML Primary Keys before referencing them in the feature table"),(0,r.yg)("li",{parentName:"ul"},"The feature table only stores URN references - it doesn't create the feature or primary key entities"),(0,r.yg)("li",{parentName:"ul"},"If you reference non-existent entities, they will appear as broken references in the UI")),(0,r.yg)("p",null,"This is different from some other DataHub entities where child entities can be created inline."),(0,r.yg)("h3",{id:"lineage-considerations"},"Lineage Considerations"),(0,r.yg)("p",null,"Feature table lineage is typically established through the features and primary keys it contains:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Feature tables themselves don't have direct ",(0,r.yg)("inlineCode",{parentName:"li"},"upstreamLineage")," aspects"),(0,r.yg)("li",{parentName:"ul"},"Instead, lineage flows through the contained features' ",(0,r.yg)("inlineCode",{parentName:"li"},"sources")," properties"),(0,r.yg)("li",{parentName:"ul"},'When querying lineage, you\'ll need to traverse through the "Contains" relationships to find upstream datasets')),(0,r.yg)("p",null,"This design reflects that features are the atomic unit of lineage in ML systems, while feature tables are organizational constructs."),(0,r.yg)("h2",{id:"technical-reference"},"Technical Reference"),(0,r.yg)("p",null,"For technical details about fields, searchability, and relationships, view the ",(0,r.yg)("strong",{parentName:"p"},"Columns")," tab in DataHub."))}c.isMDXComponent=!0}}]);