"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[52669],{15680:(e,t,a)=>{a.d(t,{xA:()=>p,yg:()=>d});var n=a(96540);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),g=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=g(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=g(a),c=i,d=u["".concat(s,".").concat(c)]||u[c]||m[c]||r;return a?n.createElement(d,l(l({ref:t},p),{},{components:a})):n.createElement(d,l({ref:t},p))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var g=2;g<r;g++)l[g]=a[g];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},18752:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>g,toc:()=>u});a(96540);var n=a(15680);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))})),e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}const o={title:"CLAUDE.md",slug:"/claude",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/CLAUDE.md"},s="CLAUDE.md",g={unversionedId:"CLAUDE",id:"CLAUDE",title:"CLAUDE.md",description:"This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.",source:"@site/genDocs/CLAUDE.md",sourceDirName:".",slug:"/claude",permalink:"/docs/claude",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/CLAUDE.md",tags:[],version:"current",frontMatter:{title:"CLAUDE.md",slug:"/claude",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/CLAUDE.md"}},p={},u=[{value:"Essential Commands",id:"essential-commands",level:2},{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Core Services",id:"core-services",level:3},{value:"Key Modules",id:"key-modules",level:3},{value:"Metadata Model Concepts",id:"metadata-model-concepts",level:3},{value:"Validation Architecture",id:"validation-architecture",level:3},{value:"Development Flow",id:"development-flow",level:2},{value:"Code Standards",id:"code-standards",level:2},{value:"General Principles",id:"general-principles",level:3},{value:"Language-Specific",id:"language-specific",level:3},{value:"Code Comments",id:"code-comments",level:3},{value:"Testing Strategy",id:"testing-strategy",level:3},{value:"Testing Principles: Focus on Value Over Coverage",id:"testing-principles-focus-on-value-over-coverage",level:4},{value:"Security Testing: Configuration Property Classification",id:"security-testing-configuration-property-classification",level:4},{value:"Commits",id:"commits",level:3},{value:"Key Documentation",id:"key-documentation",level:2},{value:"Important Notes",id:"important-notes",level:2}],m={toc:u},c="wrapper";function d(e){var{components:t}=e,a=l(e,["components"]);return(0,n.yg)(c,r(function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),n.forEach((function(t){i(e,t,a[t])}))}return e}({},m,a),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"claudemd"},"CLAUDE.md"),(0,n.yg)("p",null,"This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository."),(0,n.yg)("h2",{id:"essential-commands"},"Essential Commands"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Build and test:")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./gradlew build           # Build entire project\n./gradlew check           # Run all tests and linting\n\n# Note that each directory typically has a build.gradle file, but the available tasks follow similar conventions.\n\n# Java code.\n./gradlew spotlessApply   # Java code formatting\n\n# Python code.\n./gradlew :metadata-ingestion:testQuick     # Fast Python unit tests\n./gradlew :metadata-ingestion:lint          # Python linting (ruff, mypy)\n./gradlew :metadata-ingestion:lintFix       # Python linting auto-fix (ruff only)\n")),(0,n.yg)("p",null,"If you are using git worktrees then exclude this as that might cause git related failures when running any gradle command."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},"./gradlew ... -x generateGitPropertiesGlobal\n")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"IMPORTANT: Verifying Python code changes:")),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"ALWAYS use ",(0,n.yg)("inlineCode",{parentName:"strong"},"./gradlew :metadata-ingestion:lintFix"))," to verify Python code changes"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"NEVER use ",(0,n.yg)("inlineCode",{parentName:"strong"},"python3 -m py_compile"))," - it doesn't catch style issues or type errors"),(0,n.yg)("li",{parentName:"ul"},"lintFix runs ruff formatting and fixing automatically, ensuring code quality"),(0,n.yg)("li",{parentName:"ul"},"For smoke-test changes, the lintFix command will also check those files")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Development setup:")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./gradlew :metadata-ingestion:installDev               # Setup Python environment\n./gradlew quickstartDebug                              # Start full DataHub stack\ncd datahub-web-react && yarn start                     # Frontend dev server\n")),(0,n.yg)("h2",{id:"architecture-overview"},"Architecture Overview"),(0,n.yg)("p",null,"DataHub is a ",(0,n.yg)("strong",{parentName:"p"},"schema-first, event-driven metadata platform")," with three core layers:"),(0,n.yg)("h3",{id:"core-services"},"Core Services"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"GMS (Generalized Metadata Service)"),": Java/Spring backend handling metadata storage and REST/GraphQL APIs"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Frontend"),": React/TypeScript application consuming GraphQL APIs"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Ingestion Framework"),": Python CLI and connectors for extracting metadata from data sources"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Event Streaming"),": Kafka-based real-time metadata change propagation")),(0,n.yg)("h3",{id:"key-modules"},"Key Modules"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"metadata-models/"),": Avro/PDL schemas defining the metadata model"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"metadata-service/"),": Backend services, APIs, and business logic"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"datahub-web-react/"),": Frontend React application"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"metadata-ingestion/"),": Python ingestion framework and CLI"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"datahub-graphql-core/"),": GraphQL schema and resolvers")),(0,n.yg)("p",null,"Most of the non-frontend modules are written in Java. The modules written in Python are:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"metadata-ingestion/")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"datahub-actions/")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"metadata-ingestion-modules/airflow-plugin/")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"metadata-ingestion-modules/gx-plugin/")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"metadata-ingestion-modules/dagster-plugin/")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"metadata-ingestion-modules/prefect-plugin/"))),(0,n.yg)("p",null,"Each Python module has a gradle setup similar to ",(0,n.yg)("inlineCode",{parentName:"p"},"metadata-ingestion/")," (documented above)"),(0,n.yg)("h3",{id:"metadata-model-concepts"},"Metadata Model Concepts"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Entities"),": Core objects (Dataset, Dashboard, Chart, CorpUser, etc.)"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Aspects"),": Metadata facets (Ownership, Schema, Documentation, etc.)"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"URNs"),": Unique identifiers (",(0,n.yg)("inlineCode",{parentName:"li"},"urn:li:dataset:(urn:li:dataPlatform:mysql,db.table,PROD)"),")"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"MCE/MCL"),": Metadata Change Events/Logs for updates"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Entity Registry"),": YAML config defining entity-aspect relationships (",(0,n.yg)("inlineCode",{parentName:"li"},"metadata-models/src/main/resources/entity-registry.yml"),")")),(0,n.yg)("h3",{id:"validation-architecture"},"Validation Architecture"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"IMPORTANT"),": Validation must work across all APIs (GraphQL, OpenAPI, RestLI)."),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Never add validation in API-specific layers")," (GraphQL resolvers, REST controllers) - this only protects one API"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Always implement AspectPayloadValidators")," in ",(0,n.yg)("inlineCode",{parentName:"li"},"metadata-io/src/main/java/com/linkedin/metadata/aspect/validation/")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Register as Spring beans")," in ",(0,n.yg)("inlineCode",{parentName:"li"},"SpringStandardPluginConfiguration.java")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Follow existing patterns"),": See ",(0,n.yg)("inlineCode",{parentName:"li"},"SystemPolicyValidator.java")," and ",(0,n.yg)("inlineCode",{parentName:"li"},"PolicyFieldTypeValidator.java")," as examples")),(0,n.yg)("h2",{id:"development-flow"},"Development Flow"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Schema changes")," in ",(0,n.yg)("inlineCode",{parentName:"li"},"metadata-models/")," trigger code generation across all languages"),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Backend changes")," in ",(0,n.yg)("inlineCode",{parentName:"li"},"metadata-service/")," and other Java modules expose new REST/GraphQL APIs"),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Frontend changes")," in ",(0,n.yg)("inlineCode",{parentName:"li"},"datahub-web-react/")," consume GraphQL APIs"),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Ingestion changes")," in ",(0,n.yg)("inlineCode",{parentName:"li"},"metadata-ingestion/")," emit metadata to backend APIs")),(0,n.yg)("h2",{id:"code-standards"},"Code Standards"),(0,n.yg)("h3",{id:"general-principles"},"General Principles"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"This is production code - maintain high quality"),(0,n.yg)("li",{parentName:"ul"},"Follow existing patterns within each module"),(0,n.yg)("li",{parentName:"ul"},"Generate appropriate unit tests"),(0,n.yg)("li",{parentName:"ul"},"Use type annotations everywhere (Python/TypeScript)")),(0,n.yg)("h3",{id:"language-specific"},"Language-Specific"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Java"),": Use Spotless formatting, Spring Boot patterns, TestNG/JUnit Jupiter for tests"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Python"),": Use ruff for linting/formatting, pytest for testing, pydantic for configs",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Type Safety"),": Everything must have type annotations, avoid ",(0,n.yg)("inlineCode",{parentName:"li"},"Any")," type, use specific types (",(0,n.yg)("inlineCode",{parentName:"li"},"Dict[str, int]"),", ",(0,n.yg)("inlineCode",{parentName:"li"},"TypedDict"),")"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Data Structures"),": Prefer dataclasses/pydantic for internal data, return dataclasses over tuples"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Code Quality"),": Avoid global state, use named arguments, don't re-export in ",(0,n.yg)("inlineCode",{parentName:"li"},"__init__.py"),", refactor repetitive code"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Error Handling"),": Robust error handling with layers of protection for known failure points"))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"TypeScript"),": Use Prettier formatting, strict types (no ",(0,n.yg)("inlineCode",{parentName:"li"},"any"),"), React Testing Library")),(0,n.yg)("h3",{id:"code-comments"},"Code Comments"),(0,n.yg)("p",null,"Only add comments that provide real value beyond what the code already expresses."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Do NOT")," add comments for:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Obvious operations (",(0,n.yg)("inlineCode",{parentName:"li"},"# Get user by ID"),", ",(0,n.yg)("inlineCode",{parentName:"li"},"// Create connection"),")"),(0,n.yg)("li",{parentName:"ul"},"What the code does when it's self-evident (",(0,n.yg)("inlineCode",{parentName:"li"},"# Loop through items"),", ",(0,n.yg)("inlineCode",{parentName:"li"},"// Set variable to true"),")"),(0,n.yg)("li",{parentName:"ul"},"Restating parameter names or return types already in signatures"),(0,n.yg)("li",{parentName:"ul"},"Basic language constructs (",(0,n.yg)("inlineCode",{parentName:"li"},"# Import modules"),", ",(0,n.yg)("inlineCode",{parentName:"li"},"// End of function"),")")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"DO")," add comments for:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Why")," something is done, especially non-obvious business logic or workarounds"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Context")," about external constraints, API quirks, or domain knowledge"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Warnings")," about gotchas, performance implications, or side effects"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"References")," to tickets, RFCs, or external documentation that explain decisions"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Complex algorithms")," or mathematical formulas that aren't immediately clear"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Temporary solutions")," with TODOs and context for future improvements")),(0,n.yg)("p",null,"Examples:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"# Good: Explains WHY and provides context\n# Use a 30-second timeout because Snowflake's query API can hang indefinitely\n# on large result sets. See issue #12345.\nconnection_timeout = 30\n\n# Bad: Restates what's obvious from code\n# Set connection timeout to 30 seconds\nconnection_timeout = 30\n")),(0,n.yg)("h3",{id:"testing-strategy"},"Testing Strategy"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Python: Tests go in the ",(0,n.yg)("inlineCode",{parentName:"li"},"tests/")," directory alongside ",(0,n.yg)("inlineCode",{parentName:"li"},"src/"),", use ",(0,n.yg)("inlineCode",{parentName:"li"},"assert")," statements"),(0,n.yg)("li",{parentName:"ul"},"Java: Tests alongside source in ",(0,n.yg)("inlineCode",{parentName:"li"},"src/test/")),(0,n.yg)("li",{parentName:"ul"},"Frontend: Tests in ",(0,n.yg)("inlineCode",{parentName:"li"},"__tests__/")," or ",(0,n.yg)("inlineCode",{parentName:"li"},".test.tsx")," files"),(0,n.yg)("li",{parentName:"ul"},"Smoke tests go in the ",(0,n.yg)("inlineCode",{parentName:"li"},"smoke-test/")," directory")),(0,n.yg)("h4",{id:"testing-principles-focus-on-value-over-coverage"},"Testing Principles: Focus on Value Over Coverage"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"IMPORTANT"),": Quality over quantity. Avoid AI-generated test anti-patterns that create maintenance burden without providing real value."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Focus on behavior, not implementation"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"\u2705 Test what the code does (business logic, edge cases that occur in production)"),(0,n.yg)("li",{parentName:"ul"},"\u274c Don't test how it does it (implementation details, private fields via reflection)"),(0,n.yg)("li",{parentName:"ul"},"\u274c Don't test third-party libraries work correctly (Spring, Micrometer, Kafka clients, etc.)"),(0,n.yg)("li",{parentName:"ul"},"\u274c Don't test Java/Python language features (",(0,n.yg)("inlineCode",{parentName:"li"},"synchronized")," methods are thread-safe, ",(0,n.yg)("inlineCode",{parentName:"li"},"@Nonnull")," parameters reject nulls)")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Avoid these specific anti-patterns"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"\u274c Testing null inputs on ",(0,n.yg)("inlineCode",{parentName:"li"},"@Nonnull"),"/",(0,n.yg)("inlineCode",{parentName:"li"},"@NonNull")," annotated parameters"),(0,n.yg)("li",{parentName:"ul"},"\u274c Verifying exact error message wording (creates brittleness during refactoring)"),(0,n.yg)("li",{parentName:"ul"},"\u274c Testing every possible input variation (case sensitivity \xd7 whitespace \xd7 special chars = maintenance nightmare)"),(0,n.yg)("li",{parentName:"ul"},"\u274c Using reflection to verify private implementation details"),(0,n.yg)("li",{parentName:"ul"},"\u274c Redundant concurrency testing on ",(0,n.yg)("inlineCode",{parentName:"li"},"synchronized")," methods"),(0,n.yg)("li",{parentName:"ul"},"\u274c Testing obvious getter/setter behavior without business logic"),(0,n.yg)("li",{parentName:"ul"},"\u274c Testing Lombok-generated code (",(0,n.yg)("inlineCode",{parentName:"li"},"@Data"),", ",(0,n.yg)("inlineCode",{parentName:"li"},"@Builder"),", ",(0,n.yg)("inlineCode",{parentName:"li"},"@Value")," classes) - you're testing Lombok's code generator, not your logic"),(0,n.yg)("li",{parentName:"ul"},"\u274c Testing that annotations exist on classes - if required annotations are missing, the framework/compiler will fail at startup, not in your tests")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Appropriate test scope"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Simple utilities")," (enums, string parsing, formatters): ~50-100 lines of focused tests",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Happy path for each method"),(0,n.yg)("li",{parentName:"ul"},"One example of invalid input per method"),(0,n.yg)("li",{parentName:"ul"},"Edge cases likely to occur in production"))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Complex business logic"),": Test proportional to risk and complexity",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Integration points and system boundaries"),(0,n.yg)("li",{parentName:"ul"},"Security-critical operations"),(0,n.yg)("li",{parentName:"ul"},"Error handling for realistic failure scenarios"))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Warning sign"),": If tests are 5x+ the size of implementation, reconsider scope")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Examples of low-value tests to avoid"),":"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-java"},'// \u274c BAD: Testing @Nonnull contract (framework\'s job)\n@Test\npublic void testNullParameterThrowsException() {\n    assertThrows(NullPointerException.class,\n        () -> service.process(null)); // parameter is @Nonnull\n}\n\n// \u274c BAD: Testing Lombok-generated code\n@Test\npublic void testBuilderSetsAllFields() {\n    MyConfig config = MyConfig.builder()\n        .field1("value1")\n        .field2("value2")\n        .build();\n    assertEquals(config.getField1(), "value1");\n    assertEquals(config.getField2(), "value2");\n}\n\n// \u274c BAD: Testing that annotations exist\n@Test\npublic void testConfigurationAnnotations() {\n    assertNotNull(MyConfig.class.getAnnotation(Configuration.class));\n    assertNotNull(MyConfig.class.getAnnotation(ComponentScan.class));\n}\n// If @Configuration is missing, Spring won\'t load the context - you don\'t need a test for this\n\n// \u274c BAD: Exact error message (brittle)\nassertEquals(exception.getMessage(),\n    "Unsupported database type \'oracle\'. Only PostgreSQL and MySQL variants are supported.");\n\n// \u274c BAD: Redundant variations\nassertEquals(DatabaseType.fromString("postgresql"), DatabaseType.POSTGRES);\nassertEquals(DatabaseType.fromString("PostgreSQL"), DatabaseType.POSTGRES);\nassertEquals(DatabaseType.fromString("POSTGRESQL"), DatabaseType.POSTGRES);\nassertEquals(DatabaseType.fromString("  postgresql  "), DatabaseType.POSTGRES);\n// ... 10 more case/whitespace variations\n\n// \u2705 GOOD: Focused behavioral test\n@Test\npublic void testFromString_ValidInputsCaseInsensitive() {\n    assertEquals(DatabaseType.fromString("postgresql"), DatabaseType.POSTGRES);\n    assertEquals(DatabaseType.fromString("POSTGRESQL"), DatabaseType.POSTGRES);\n    assertEquals(DatabaseType.fromString("  postgresql  "), DatabaseType.POSTGRES);\n}\n\n@Test\npublic void testFromString_InvalidInputThrows() {\n    assertThrows(IllegalArgumentException.class,\n        () -> DatabaseType.fromString("oracle"));\n}\n\n// \u2705 GOOD: Testing YOUR custom validation logic on a Lombok class\n@Test\npublic void testCustomValidation() {\n    assertThrows(IllegalArgumentException.class,\n        () -> MyConfig.builder().field1("invalid").build().validate());\n}\n')),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"When in doubt"),': Ask "Does this test protect against a realistic regression?" If not, skip it.'),(0,n.yg)("h4",{id:"security-testing-configuration-property-classification"},"Security Testing: Configuration Property Classification"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Critical test"),": ",(0,n.yg)("inlineCode",{parentName:"p"},"metadata-io/src/test/java/com/linkedin/metadata/system_info/collectors/PropertiesCollectorConfigurationTest.java")),(0,n.yg)("p",null,"This test prevents sensitive data leaks by requiring explicit classification of all configuration properties as either sensitive (redacted) or non-sensitive (visible in system info)."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"When adding new configuration properties"),": The test will fail with clear instructions on which classification list to add your property to. Refer to the test file's comprehensive documentation for template syntax and examples."),(0,n.yg)("p",null,"This is a mandatory security guardrail - never disable or skip this test."),(0,n.yg)("h3",{id:"commits"},"Commits"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Follow Conventional Commits format for commit messages"),(0,n.yg)("li",{parentName:"ul"},"Breaking Changes: Always update ",(0,n.yg)("inlineCode",{parentName:"li"},"docs/how/updating-datahub.md")," for breaking changes. Write entries for non-technical audiences, reference the PR number, and focus on what users need to change rather than internal implementation details")),(0,n.yg)("h2",{id:"key-documentation"},"Key Documentation"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Essential reading:")),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"docs/architecture/architecture.md")," - System architecture overview"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"docs/modeling/metadata-model.md")," - How metadata is modeled"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"docs/what-is-datahub/datahub-concepts.md")," - Core concepts (URNs, entities, etc.)")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"External docs:")),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"https://docs.datahub.com/docs/developers"},"https://docs.datahub.com/docs/developers")," - Official developer guide"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"https://demo.datahub.com/"},"https://demo.datahub.com/")," - Live demo environment")),(0,n.yg)("h2",{id:"important-notes"},"Important Notes"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Entity Registry is defined in YAML, not code (",(0,n.yg)("inlineCode",{parentName:"li"},"entity-registry.yml"),")"),(0,n.yg)("li",{parentName:"ul"},"All metadata changes flow through the event streaming system"),(0,n.yg)("li",{parentName:"ul"},"GraphQL schema is generated from backend GMS APIs")))}d.isMDXComponent=!0}}]);