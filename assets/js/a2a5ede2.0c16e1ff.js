"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[85770],{15680:(e,t,a)=>{a.d(t,{xA:()=>u,yg:()=>m});var n=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=d(a),g=r,m=c["".concat(l,".").concat(g)]||c[g]||p[g]||o;return a?n.createElement(m,i(i({ref:t},u),{},{components:a})):n.createElement(m,i({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var d=2;d<o;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},80908:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>d,toc:()=>c});a(96540);var n=a(15680);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))})),e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}const s={sidebar_position:32,title:"Data Product",slug:"/generated/metamodel/entities/dataproduct-datahub",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataProduct-datahub.md"},l="Data Product",d={unversionedId:"docs/generated/metamodel/entities/dataProduct-datahub",id:"docs/generated/metamodel/entities/dataProduct-datahub",title:"Data Product",description:"Data Products are curated collections of data assets designed for easy discovery and consumption. They represent an innovative way to organize and package related data assets such as Tables, Dashboards, Charts, Pipelines, and other entities within DataHub. Data Products are a key concept in data mesh architecture, where they serve as independent units of data managed by specific domain teams.",source:"@site/genDocs/docs/generated/metamodel/entities/dataProduct-datahub.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/dataproduct-datahub",permalink:"/docs/generated/metamodel/entities/dataproduct-datahub",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataProduct-datahub.md",tags:[],version:"current",sidebarPosition:32,frontMatter:{sidebar_position:32,title:"Data Product",slug:"/generated/metamodel/entities/dataproduct-datahub",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataProduct-datahub.md"},sidebar:"overviewSidebar",previous:{title:"Query",permalink:"/docs/generated/metamodel/entities/query"},next:{title:"Data Product",permalink:"/docs/generated/metamodel/entities/dataproduct"}},u={},c=[{value:"Identity",id:"identity",level:2},{value:"Important Capabilities",id:"important-capabilities",level:2},{value:"Data Product Properties",id:"data-product-properties",level:3},{value:"Asset Associations",id:"asset-associations",level:4},{value:"Asset Settings",id:"asset-settings",level:3},{value:"Tags and Glossary Terms",id:"tags-and-glossary-terms",level:3},{value:"Ownership",id:"ownership",level:3},{value:"Domains",id:"domains",level:3},{value:"Documentation and Institutional Memory",id:"documentation-and-institutional-memory",level:3},{value:"Adding Assets to a Data Product",id:"adding-assets-to-a-data-product",level:3},{value:"Querying Data Products",id:"querying-data-products",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"Relationship to Domains",id:"relationship-to-domains",level:3},{value:"Relationship to Assets",id:"relationship-to-assets",level:3},{value:"Authorization and Access Control",id:"authorization-and-access-control",level:3},{value:"GraphQL API",id:"graphql-api",level:3},{value:"Search and Discovery",id:"search-and-discovery",level:3},{value:"Notable Exceptions",id:"notable-exceptions",level:2},{value:"Domain Requirement",id:"domain-requirement",level:3},{value:"Output Ports",id:"output-ports",level:3},{value:"YAML-based Management",id:"yaml-based-management",level:3},{value:"Multi-Asset Membership",id:"multi-asset-membership",level:3},{value:"Technical Reference",id:"technical-reference",level:2}],p={toc:c},g="wrapper";function m(e){var{components:t}=e,a=i(e,["components"]);return(0,n.yg)(g,o(function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),n.forEach((function(t){r(e,t,a[t])}))}return e}({},p,a),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"data-product"},"Data Product"),(0,n.yg)("p",null,"Data Products are curated collections of data assets designed for easy discovery and consumption. They represent an innovative way to organize and package related data assets such as Tables, Dashboards, Charts, Pipelines, and other entities within DataHub. Data Products are a key concept in data mesh architecture, where they serve as independent units of data managed by specific domain teams."),(0,n.yg)("p",null,"Unlike other entities in DataHub that typically represent technical assets in source systems, Data Products are a DataHub-invented concept that provides a logical grouping mechanism for organizing assets into consumable offerings."),(0,n.yg)("h2",{id:"identity"},"Identity"),(0,n.yg)("p",null,"Data Products are identified by a single field:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"id"),": A unique identifier for the Data Product, typically a human-readable string such as ",(0,n.yg)("inlineCode",{parentName:"li"},"pet_of_the_week")," or ",(0,n.yg)("inlineCode",{parentName:"li"},"customer_360"),".")),(0,n.yg)("p",null,"An example of a Data Product identifier is ",(0,n.yg)("inlineCode",{parentName:"p"},"urn:li:dataProduct:pet_of_the_week"),"."),(0,n.yg)("p",null,"The simplicity of the identifier makes Data Products easy to create and reference, as they don't need to be tied to any particular platform or technology."),(0,n.yg)("h2",{id:"important-capabilities"},"Important Capabilities"),(0,n.yg)("h3",{id:"data-product-properties"},"Data Product Properties"),(0,n.yg)("p",null,"The core properties of a Data Product are captured in the ",(0,n.yg)("inlineCode",{parentName:"p"},"dataProductProperties")," aspect, which includes:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"name"),": The display name of the Data Product, which is searchable and used for autocomplete"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"description"),": Documentation describing what the Data Product offers and how to use it"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"assets"),": A list of data assets that are part of this Data Product, with each asset having an optional ",(0,n.yg)("inlineCode",{parentName:"li"},"outputPort")," flag")),(0,n.yg)("h4",{id:"asset-associations"},"Asset Associations"),(0,n.yg)("p",null,"Data Products can contain a wide variety of asset types as defined in the ",(0,n.yg)("inlineCode",{parentName:"p"},"dataProductProperties")," aspect:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Datasets (tables, views, streams)"),(0,n.yg)("li",{parentName:"ul"},"Data Jobs and Data Flows (pipelines)"),(0,n.yg)("li",{parentName:"ul"},"Dashboards and Charts (visualizations)"),(0,n.yg)("li",{parentName:"ul"},"Notebooks"),(0,n.yg)("li",{parentName:"ul"},"Containers (schemas, databases)"),(0,n.yg)("li",{parentName:"ul"},"ML Models, ML Model Groups, ML Feature Tables, ML Features, and ML Primary Keys")),(0,n.yg)("p",null,"Each asset association can be marked as an ",(0,n.yg)("strong",{parentName:"p"},"output port"),", which in data mesh terminology represents a data asset that is intended to be shared and consumed by other teams. This allows Data Product owners to distinguish between:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Internal assets"),": Data used internally within the Data Product for processing"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Output ports"),": Data explicitly published for external consumption")),(0,n.yg)("p",null,"The following code snippet shows how to create a Data Product with multiple assets, including marking one as an output port."),(0,n.yg)("details",null,(0,n.yg)("summary",null,"Python: Create a Data Product with assets"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'from datahub.api.entities.dataproduct.dataproduct import DataProduct\nfrom datahub.ingestion.graph.client import DatahubClientConfig, DataHubGraph\n\ngms_endpoint = "http://localhost:8080"\ngraph = DataHubGraph(DatahubClientConfig(server=gms_endpoint))\n\ndata_product = DataProduct(\n    id="customer_360",\n    display_name="Customer 360",\n    domain="urn:li:domain:marketing",\n    description="A comprehensive view of customer data including profiles, transactions, and behaviors.",\n    assets=[\n        "urn:li:dataset:(urn:li:dataPlatform:snowflake,customer_db.public.customer_profile,PROD)",\n        "urn:li:dataset:(urn:li:dataPlatform:snowflake,customer_db.public.customer_transactions,PROD)",\n        "urn:li:dashboard:(looker,customer_overview)",\n    ],\n    output_ports=[\n        "urn:li:dataset:(urn:li:dataPlatform:snowflake,customer_db.public.customer_profile,PROD)"\n    ],\n    owners=[\n        {"id": "urn:li:corpuser:datahub", "type": "BUSINESS_OWNER"},\n        {"id": "urn:li:corpuser:jdoe", "type": "TECHNICAL_OWNER"},\n    ],\n    terms=["urn:li:glossaryTerm:CustomerData"],\n    tags=["urn:li:tag:production"],\n    properties={"tier": "gold", "sla": "99.9%"},\n    external_url="https://wiki.company.com/customer-360",\n)\n\nfor mcp in data_product.generate_mcp(upsert=True):\n    graph.emit(mcp)\n\nprint(f"Created Data Product: urn:li:dataProduct:{data_product.id}")\n\n'))),(0,n.yg)("h3",{id:"asset-settings"},"Asset Settings"),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"assetSettings")," aspect allows Data Products to configure custom settings, such as custom asset summary configurations. This aspect is shared with other organizational entities like Domains and Glossary Terms, providing a consistent way to customize how assets are displayed and summarized."),(0,n.yg)("h3",{id:"tags-and-glossary-terms"},"Tags and Glossary Terms"),(0,n.yg)("p",null,'Data Products support Tags and Glossary Terms, allowing you to categorize and document your data offerings. Tags can be used for informal categorization (e.g., "adoption", "experimental"), while Glossary Terms provide formal business vocabulary linkage.'),(0,n.yg)("p",null,"Here is an example of adding metadata to a Data Product:"),(0,n.yg)("details",null,(0,n.yg)("summary",null,"Python SDK: Add tags and terms to a Data Product"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'import logging\n\nfrom datahub.emitter.mce_builder import (\n    make_data_product_urn,\n    make_tag_urn,\n    make_term_urn,\n)\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import (\n    GlossaryTermAssociationClass,\n    TagAssociationClass,\n)\nfrom datahub.specific.dataproduct import DataProductPatchBuilder\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\nrest_emitter = DatahubRestEmitter(gms_server="http://localhost:8080")\n\ndata_product_urn = make_data_product_urn("customer_360")\n\nfor mcp in (\n    DataProductPatchBuilder(data_product_urn)\n    .add_tag(TagAssociationClass(tag=make_tag_urn("production")))\n    .add_tag(TagAssociationClass(tag=make_tag_urn("pii")))\n    .add_term(\n        GlossaryTermAssociationClass(urn=make_term_urn("CustomerData.PersonalInfo"))\n    )\n    .build()\n):\n    rest_emitter.emit(mcp)\n    log.info(f"Added metadata to Data Product {data_product_urn}")\n\n'))),(0,n.yg)("h3",{id:"ownership"},"Ownership"),(0,n.yg)("p",null,"Data Products support ownership through the ",(0,n.yg)("inlineCode",{parentName:"p"},"ownership")," aspect. Owners can be individuals or groups, and can have different ownership types (BUSINESS_OWNER, TECHNICAL_OWNER, DATA_STEWARD, etc.). When a Data Product is created through the UI, the creator is automatically added as an owner."),(0,n.yg)("p",null,"Ownership helps establish accountability and makes it clear who is responsible for maintaining the Data Product and ensuring data quality."),(0,n.yg)("h3",{id:"domains"},"Domains"),(0,n.yg)("p",null,"Every Data Product must belong to exactly one Domain. This is a core organizational principle in DataHub's Data Product model - Data Products cannot exist independently but must be associated with a Domain that represents the business area or team responsible for the Data Product."),(0,n.yg)("p",null,"The Domain association is captured in the ",(0,n.yg)("inlineCode",{parentName:"p"},"domains")," aspect and is enforced by the UI and API when creating Data Products."),(0,n.yg)("h3",{id:"documentation-and-institutional-memory"},"Documentation and Institutional Memory"),(0,n.yg)("p",null,"Data Products can have rich documentation beyond the basic description field:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"institutionalMemory"),": Links to external resources like Confluence pages, Google Docs, or other documentation"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"forms"),": Structured documentation through DataHub's Forms feature"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"structuredProperties"),": Custom metadata fields defined by your organization")),(0,n.yg)("h3",{id:"adding-assets-to-a-data-product"},"Adding Assets to a Data Product"),(0,n.yg)("p",null,"Assets can be associated with a Data Product in two ways:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"From the Data Product page"),': Use the "Add Assets" button to search for and add multiple assets at once'),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"From the Asset page"),': Use the "Set Data Product" option in the asset\'s sidebar to add it to a Data Product')),(0,n.yg)("details",null,(0,n.yg)("summary",null,"Python SDK: Add assets to an existing Data Product"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'import logging\n\nfrom datahub.emitter.mce_builder import make_data_product_urn, make_dataset_urn\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.specific.dataproduct import DataProductPatchBuilder\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\nrest_emitter = DatahubRestEmitter(gms_server="http://localhost:8080")\n\ndata_product_urn = make_data_product_urn("customer_360")\n\nnew_assets = [\n    make_dataset_urn(\n        platform="snowflake",\n        name="customer_db.public.customer_orders",\n        env="PROD",\n    ),\n    make_dataset_urn(\n        platform="snowflake",\n        name="customer_db.public.customer_support_tickets",\n        env="PROD",\n    ),\n]\n\nfor mcp in (\n    DataProductPatchBuilder(data_product_urn)\n    .add_asset(new_assets[0])\n    .add_asset(new_assets[1])\n    .build()\n):\n    rest_emitter.emit(mcp)\n    log.info(f"Added assets to Data Product {data_product_urn}")\n\n'))),(0,n.yg)("h3",{id:"querying-data-products"},"Querying Data Products"),(0,n.yg)("p",null,"Data Products can be queried using the REST API to retrieve their properties and associated assets."),(0,n.yg)("details",null,(0,n.yg)("summary",null,"Query a Data Product via REST API"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'import logging\n\nfrom datahub.ingestion.graph.client import DatahubClientConfig, DataHubGraph\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\ngms_endpoint = "http://localhost:8080"\ngraph = DataHubGraph(DatahubClientConfig(server=gms_endpoint))\n\ndata_product_urn = "urn:li:dataProduct:customer_360"\n\ndata_product = graph.get_entity_raw(\n    entity_urn=data_product_urn,\n    aspects=[\n        "dataProductKey",\n        "dataProductProperties",\n        "ownership",\n        "domains",\n        "globalTags",\n        "glossaryTerms",\n    ],\n)\n\nif data_product:\n    log.info(f"Successfully retrieved Data Product: {data_product_urn}")\n\n    properties = data_product.get("dataProductProperties")\n    if properties:\n        log.info(f"Name: {properties.get(\'name\')}")\n        log.info(f"Description: {properties.get(\'description\')}")\n\n        assets = properties.get("assets", [])\n        log.info(f"Number of assets: {len(assets)}")\n        for asset in assets:\n            asset_urn = asset.get("destinationUrn")\n            is_output_port = asset.get("outputPort", False)\n            log.info(f"  - Asset: {asset_urn} (Output Port: {is_output_port})")\n\n    domains = data_product.get("domains")\n    if domains:\n        domain_urns = domains.get("domains", [])\n        log.info(f"Domain: {domain_urns}")\n\n    ownership = data_product.get("ownership")\n    if ownership:\n        owners = ownership.get("owners", [])\n        log.info(f"Number of owners: {len(owners)}")\n        for owner in owners:\n            log.info(f"  - Owner: {owner.get(\'owner\')} (Type: {owner.get(\'type\')})")\n\n    tags = data_product.get("globalTags")\n    if tags:\n        tag_list = tags.get("tags", [])\n        log.info(f"Tags: {[t.get(\'tag\') for t in tag_list]}")\n\n    terms = data_product.get("glossaryTerms")\n    if terms:\n        term_list = terms.get("terms", [])\n        log.info(f"Glossary Terms: {[t.get(\'urn\') for t in term_list]}")\nelse:\n    log.error(f"Data Product not found: {data_product_urn}")\n\n'))),(0,n.yg)("h2",{id:"integration-points"},"Integration Points"),(0,n.yg)("p",null,"Data Products integrate with several key areas of DataHub:"),(0,n.yg)("h3",{id:"relationship-to-domains"},"Relationship to Domains"),(0,n.yg)("p",null,"Data Products must belong to a Domain, creating a hierarchical organization:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},'Domain (e.g., "Marketing")\n  \u2514\u2500\u2500 Data Product (e.g., "Customer 360")\n      \u251c\u2500\u2500 Dataset: customer_profile\n      \u251c\u2500\u2500 Dataset: customer_transactions\n      \u251c\u2500\u2500 Dashboard: customer_overview\n      \u2514\u2500\u2500 DataFlow: customer_pipeline\n')),(0,n.yg)("p",null,"This hierarchy allows organizations to implement data mesh principles where each domain owns and manages its Data Products."),(0,n.yg)("h3",{id:"relationship-to-assets"},"Relationship to Assets"),(0,n.yg)("p",null,"Data Products create a ",(0,n.yg)("inlineCode",{parentName:"p"},"DataProductContains")," relationship with their assets. This relationship is bidirectional:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"From the Data Product, you can see all contained assets"),(0,n.yg)("li",{parentName:"ul"},"From any asset, you can see which Data Product(s) it belongs to")),(0,n.yg)("p",null,'An asset can belong to multiple Data Products, allowing for flexible organization schemes (e.g., an asset could be part of both a "Customer 360" product and a "Marketing Analytics" product).'),(0,n.yg)("h3",{id:"authorization-and-access-control"},"Authorization and Access Control"),(0,n.yg)("p",null,"DataHub provides fine-grained permissions for Data Products:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Manage Data Product"),": Required to create/delete Data Products within a Domain"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Edit Data Product"),": Required to add/remove assets from a Data Product")),(0,n.yg)("p",null,"These privileges can be granted through ",(0,n.yg)("a",{parentName:"p",href:"/docs/authorization/policies"},"Metadata Policies"),", allowing organizations to control who can create and modify Data Products."),(0,n.yg)("h3",{id:"graphql-api"},"GraphQL API"),(0,n.yg)("p",null,"The DataHub GraphQL API provides several mutations for working with Data Products:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"createDataProduct"),": Create a new Data Product within a Domain"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"updateDataProduct"),": Update Data Product properties"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"deleteDataProduct"),": Delete a Data Product"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"batchSetDataProduct"),": Add or remove multiple assets from a Data Product"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"listDataProductAssets"),": Query assets belonging to a Data Product")),(0,n.yg)("h3",{id:"search-and-discovery"},"Search and Discovery"),(0,n.yg)("p",null,"Data Products are searchable entities in DataHub. The ",(0,n.yg)("inlineCode",{parentName:"p"},"name")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"description")," fields are indexed, and Data Products can be filtered by:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Domain"),(0,n.yg)("li",{parentName:"ul"},"Ownership"),(0,n.yg)("li",{parentName:"ul"},"Tags"),(0,n.yg)("li",{parentName:"ul"},"Glossary Terms"),(0,n.yg)("li",{parentName:"ul"},"Structured Properties")),(0,n.yg)("p",null,"This makes it easy for data consumers to discover relevant Data Products across the organization."),(0,n.yg)("h2",{id:"notable-exceptions"},"Notable Exceptions"),(0,n.yg)("h3",{id:"domain-requirement"},"Domain Requirement"),(0,n.yg)("p",null,"Unlike many other entities in DataHub, Data Products have a hard requirement to belong to a Domain. This is by design to support data mesh principles where every Data Product must have a clear organizational owner. You cannot create a Data Product without first having a Domain to associate it with."),(0,n.yg)("h3",{id:"output-ports"},"Output Ports"),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"outputPort")," flag on asset associations is a forward-looking feature aligned with data mesh principles. While the flag can be set today, advanced features around output ports (such as differentiated access control or versioning) are still being developed. The current roadmap includes:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Support for marking data assets in a Data Product as private versus shareable"),(0,n.yg)("li",{parentName:"ul"},"Support for declaring data lineage manually between Data Products"),(0,n.yg)("li",{parentName:"ul"},"Support for declaring logical schemas for Data Products"),(0,n.yg)("li",{parentName:"ul"},"Support for associating data contracts with Data Products"),(0,n.yg)("li",{parentName:"ul"},"Support for semantic versioning of Data Products")),(0,n.yg)("h3",{id:"yaml-based-management"},"YAML-based Management"),(0,n.yg)("p",null,"DataHub supports managing Data Products as code through YAML files. This enables GitOps workflows where Data Product definitions are version-controlled and deployed through CI/CD pipelines. The ",(0,n.yg)("inlineCode",{parentName:"p"},"datahub")," CLI provides commands to:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"datahub dataproduct upsert"),": Create or update Data Products from YAML"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"datahub dataproduct diff"),": Compare YAML with current state"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"datahub dataproduct delete"),": Remove Data Products")),(0,n.yg)("p",null,"This allows for a hybrid model where business users can manage Data Products through the UI while technical teams can use infrastructure-as-code practices."),(0,n.yg)("h3",{id:"multi-asset-membership"},"Multi-Asset Membership"),(0,n.yg)("p",null,"Unlike some organizational constructs in other systems, an asset in DataHub can belong to multiple Data Products simultaneously. This flexibility supports different organizational perspectives - for example, a dataset might be part of a domain-specific product while also being included in a cross-functional analytics product."),(0,n.yg)("h2",{id:"technical-reference"},"Technical Reference"),(0,n.yg)("p",null,"For technical details about fields, searchability, and relationships, view the ",(0,n.yg)("strong",{parentName:"p"},"Columns")," tab in DataHub."))}m.isMDXComponent=!0}}]);