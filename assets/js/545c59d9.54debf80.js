"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[67627],{15680:(e,a,n)=>{n.d(a,{xA:()=>p,yg:()=>u});var t=n(96540);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,i=function(e,a){if(null==e)return{};var n,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=t.createContext({}),c=function(e){var a=t.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},p=function(e){var a=c(e.components);return t.createElement(l.Provider,{value:a},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},g=t.forwardRef((function(e,a){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),g=i,u=m["".concat(l,".").concat(g)]||m[g]||d[g]||r;return n?t.createElement(u,o(o({ref:a},p),{},{components:n})):t.createElement(u,o({ref:a},p))}));function u(e,a){var n=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=g;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s[m]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}g.displayName="MDXCreateElement"},18116:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>m});n(96540);var t=n(15680);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){return a=null!=a?a:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):function(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))})),e}function o(e,a){if(null==e)return{};var n,t,i=function(e,a){if(null==e)return{};var n,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}const s={sidebar_position:12,title:"Container",slug:"/generated/metamodel/entities/container-datahub",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/container-datahub.md"},l="Container",c={unversionedId:"docs/generated/metamodel/entities/container-datahub",id:"docs/generated/metamodel/entities/container-datahub",title:"Container",description:"The container entity is a core entity in the metadata model that represents a grouping of related data assets. Containers provide hierarchical organization for datasets, charts, dashboards, and other containers, enabling navigation and structure discovery within data platforms.",source:"@site/genDocs/docs/generated/metamodel/entities/container-datahub.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/container-datahub",permalink:"/docs/generated/metamodel/entities/container-datahub",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/container-datahub.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12,title:"Container",slug:"/generated/metamodel/entities/container-datahub",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/container-datahub.md"},sidebar:"overviewSidebar",previous:{title:"Domain",permalink:"/docs/generated/metamodel/entities/domain"},next:{title:"Container",permalink:"/docs/generated/metamodel/entities/container"}},p={},m=[{value:"Identity",id:"identity",level:2},{value:"URN Examples",id:"urn-examples",level:3},{value:"Real-World Concepts",id:"real-world-concepts",level:2},{value:"Important Capabilities",id:"important-capabilities",level:2},{value:"Container Properties",id:"container-properties",level:3},{value:"Editable Container Properties",id:"editable-container-properties",level:3},{value:"Hierarchical Relationships",id:"hierarchical-relationships",level:3},{value:"Subtypes",id:"subtypes",level:3},{value:"ML Experiments as Containers",id:"ml-experiments-as-containers",level:3},{value:"Containable Entities",id:"containable-entities",level:3},{value:"Code Examples",id:"code-examples",level:2},{value:"Create a Database Container",id:"create-a-database-container",level:3},{value:"Create a Schema Container with Parent",id:"create-a-schema-container-with-parent",level:3},{value:"Add Metadata to a Container",id:"add-metadata-to-a-container",level:3},{value:"Query Container via REST API",id:"query-container-via-rest-api",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"Relationship with Datasets",id:"relationship-with-datasets",level:3},{value:"Hierarchical Navigation",id:"hierarchical-navigation",level:3},{value:"GraphQL Resolvers",id:"graphql-resolvers",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:3},{value:"Notable Exceptions",id:"notable-exceptions",level:2},{value:"GUID Stability",id:"guid-stability",level:3},{value:"Self-Referential Containers",id:"self-referential-containers",level:3},{value:"Environment Handling",id:"environment-handling",level:3},{value:"Platform Instance Association",id:"platform-instance-association",level:3},{value:"Access Control",id:"access-control",level:3},{value:"Technical Reference",id:"technical-reference",level:2}],d={toc:m},g="wrapper";function u(e){var{components:a}=e,n=o(e,["components"]);return(0,t.yg)(g,r(function(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{},t=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),t.forEach((function(a){i(e,a,n[a])}))}return e}({},d,n),{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"container"},"Container"),(0,t.yg)("p",null,"The container entity is a core entity in the metadata model that represents a grouping of related data assets. Containers provide hierarchical organization for datasets, charts, dashboards, and other containers, enabling navigation and structure discovery within data platforms."),(0,t.yg)("h2",{id:"identity"},"Identity"),(0,t.yg)("p",null,"Containers are uniquely identified by a GUID (Globally Unique Identifier) that is typically derived from a combination of attributes specific to the container type. Unlike datasets which use platform, name, and environment, containers use a more flexible identification scheme based on their hierarchical properties."),(0,t.yg)("p",null,"The URN structure for a container is: ",(0,t.yg)("inlineCode",{parentName:"p"},"urn:li:container:{guid}")),(0,t.yg)("p",null,"The GUID is typically computed from container-specific properties such as:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Database containers"),": platform + instance + database name"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Schema containers"),": platform + instance + database + schema name"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Project containers"),": platform + instance + project_id"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Folder containers"),": platform + instance + folder_abs_path"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Bucket containers"),": platform + instance + bucket_name")),(0,t.yg)("h3",{id:"urn-examples"},"URN Examples"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"urn:li:container:b5e95fce839e7d78151ed7e0a7420d84\n")),(0,t.yg)("p",null,"The GUID is generated using the ",(0,t.yg)("inlineCode",{parentName:"p"},"datahub_guid()")," function from a dictionary of properties. For example, a Snowflake schema container would be identified by:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'{\n  "platform": "snowflake",\n  "instance": "prod_instance",\n  "database": "analytics",\n  "schema": "reporting"\n}\n')),(0,t.yg)("h2",{id:"real-world-concepts"},"Real-World Concepts"),(0,t.yg)("p",null,"Containers represent various hierarchical structures in data platforms:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Databases"),": Top-level organizational units in relational systems (MySQL, PostgreSQL, Snowflake)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Schemas"),": Logical groupings within databases (Snowflake schemas, PostgreSQL schemas)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Projects"),": Organizational units in cloud platforms (BigQuery projects)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Datasets"),": Logical groupings in cloud platforms (BigQuery datasets)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Folders"),": Directory structures in file systems and data lakes (S3 folders, ADLS directories)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Buckets"),": Top-level storage containers in cloud object stores (S3 buckets, GCS buckets)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Workspaces"),": Organizational units in BI platforms (Power BI workspaces, Tableau sites)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Catalogs"),": Top-level organizational units in data catalogs (Unity Catalog, Iceberg catalogs)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Metastores"),": Storage metadata repositories (Hive metastore, Unity metastore)")),(0,t.yg)("h2",{id:"important-capabilities"},"Important Capabilities"),(0,t.yg)("h3",{id:"container-properties"},"Container Properties"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"containerProperties")," aspect contains metadata inherited from the source system:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"name"),": Display name of the container (required)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"qualifiedName"),': Fully-qualified name (optional, e.g., "prod.analytics.reporting")'),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"description"),": Description from the source system"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"env"),": Environment indicator (PROD, DEV, QA, etc.)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"customProperties"),": Additional key-value properties from the source system"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"externalUrl"),": Link to the container in the source system"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"created"),": Timestamp when the container was created in the source system"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"lastModified"),": Timestamp when the container was last modified in the source system")),(0,t.yg)("h3",{id:"editable-container-properties"},"Editable Container Properties"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"editableContainerProperties")," aspect allows users to override or add information via the UI:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"description"),": User-provided description that supplements or overrides the source system description")),(0,t.yg)("p",null,"This separation ensures that metadata from source systems doesn't conflict with user-provided annotations."),(0,t.yg)("h3",{id:"hierarchical-relationships"},"Hierarchical Relationships"),(0,t.yg)("p",null,"Containers support nested hierarchies through the ",(0,t.yg)("inlineCode",{parentName:"p"},"container")," aspect, which links a container to its parent container. This enables multi-level organizational structures:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"Platform (implicit)\n\u2514\u2500\u2500 Database Container\n    \u2514\u2500\u2500 Schema Container\n        \u2514\u2500\u2500 Dataset\n")),(0,t.yg)("p",null,"For example, in Snowflake:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"Snowflake Platform\n\u2514\u2500\u2500 ANALYTICS_DB (Database Container)\n    \u2514\u2500\u2500 REPORTING (Schema Container)\n        \u2514\u2500\u2500 SALES_METRICS (Dataset)\n        \u2514\u2500\u2500 REVENUE_TABLE (Dataset)\n")),(0,t.yg)("h3",{id:"subtypes"},"Subtypes"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"subTypes")," aspect specifies the type of container, which helps the UI render appropriate icons and behaviors. Common subtypes include:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Database"),": Relational database containers"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Schema"),": Schema-level containers within databases"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Project"),": Cloud project containers (GCP, Azure)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Dataset"),": BigQuery dataset containers"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Folder"),": File system folders"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Bucket"),": Object storage buckets"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Workspace"),": BI platform workspaces"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Catalog"),": Data catalog containers"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Metastore"),": Metadata storage containers"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"MLflow Experiment")," (",(0,t.yg)("inlineCode",{parentName:"li"},"MLAssetSubTypes.MLFLOW_EXPERIMENT"),"): ML experiment containers that organize training runs")),(0,t.yg)("h3",{id:"ml-experiments-as-containers"},"ML Experiments as Containers"),(0,t.yg)("p",null,"Machine learning experiments are modeled as containers with the ",(0,t.yg)("inlineCode",{parentName:"p"},"MLFLOW_EXPERIMENT")," subtype. This pattern enables organizing related training runs (which are ",(0,t.yg)("inlineCode",{parentName:"p"},"dataProcessInstance")," entities) into logical groups for comparison and tracking:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"ML Experiment (Container)\n\u251c\u2500\u2500 Training Run 1 (DataProcessInstance)\n\u251c\u2500\u2500 Training Run 2 (DataProcessInstance)\n\u2514\u2500\u2500 Training Run 3 (DataProcessInstance)\n")),(0,t.yg)("p",null,"Training runs belong to experiments through the ",(0,t.yg)("inlineCode",{parentName:"p"},"container")," aspect. This structure mirrors common ML platform patterns (like MLflow) and enables:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Comparing metrics across multiple training attempts"),(0,t.yg)("li",{parentName:"ul"},"Tracking the evolution of a model through iterations"),(0,t.yg)("li",{parentName:"ul"},"Organizing training work by project or objective")),(0,t.yg)("p",null,"For more information on ML experiments and training runs, see:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/docs/generated/metamodel/entities/mlmodel#training-runs-and-experiments"},"ML Model entity documentation")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/docs/generated/metamodel/entities/dataprocessinstance#tracking-ml-training-run-in-a-container"},"DataProcessInstance documentation for training runs"))),(0,t.yg)("h3",{id:"containable-entities"},"Containable Entities"),(0,t.yg)("p",null,"The following entity types can be contained within a container:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Datasets"),(0,t.yg)("li",{parentName:"ul"},"Charts"),(0,t.yg)("li",{parentName:"ul"},"Dashboards"),(0,t.yg)("li",{parentName:"ul"},"DataProcessInstances (e.g., training runs in ML experiments)"),(0,t.yg)("li",{parentName:"ul"},"Other Containers (for nested hierarchies)")),(0,t.yg)("h2",{id:"code-examples"},"Code Examples"),(0,t.yg)("h3",{id:"create-a-database-container"},"Create a Database Container"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Python SDK: Create a database container"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# metadata-ingestion/examples/library/container_create_database.py\nfrom datahub.emitter.mcp_builder import DatabaseKey\nfrom datahub.sdk import Container, DataHubClient\n\nclient = DataHubClient.from_env()\n\ncontainer = Container(\n    container_key=DatabaseKey(\n        platform="snowflake",\n        instance="production",\n        database="analytics_db",\n    ),\n    display_name="Analytics Database",\n    description="Main analytics database containing reporting and metrics data",\n    subtype="Database",\n    external_url="https://app.snowflake.com/analytics_db",\n    parent_container=None,\n)\n\nclient.entities.upsert(container)\n\nprint(f"Created database container with URN: {container.urn}")\n\n'))),(0,t.yg)("h3",{id:"create-a-schema-container-with-parent"},"Create a Schema Container with Parent"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Python SDK: Create a schema container with parent database"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# metadata-ingestion/examples/library/container_create_schema.py\nfrom datahub.emitter.mcp_builder import DatabaseKey, SchemaKey\nfrom datahub.sdk import Container, DataHubClient\n\nclient = DataHubClient.from_env()\n\n# First, create the database container\ndatabase_key = DatabaseKey(\n    platform="snowflake",\n    instance="production",\n    database="analytics_db",\n)\n\ndatabase_container = Container(\n    container_key=database_key,\n    display_name="Analytics Database",\n    description="Main analytics database",\n    subtype="Database",\n)\n\nclient.entities.upsert(database_container)\nprint(f"Created database container: {database_container.urn}")\n\n# Create a schema container within the database\nschema_key = SchemaKey(\n    platform="snowflake",\n    instance="production",\n    database="analytics_db",\n    schema="reporting",\n)\n\nschema_container = Container(\n    container_key=schema_key,\n    display_name="Reporting Schema",\n    description="Schema containing all reporting tables and views",\n    subtype="Schema",\n)\n\nclient.entities.upsert(schema_container)\nprint(f"Created schema container: {schema_container.urn}")\nprint("Schema container is nested under database container")\n\n'))),(0,t.yg)("h3",{id:"add-metadata-to-a-container"},"Add Metadata to a Container"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Python SDK: Add tags, terms, and ownership to a container"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'from datahub.emitter.mcp_builder import DatabaseKey\nfrom datahub.sdk import ContainerUrn, CorpUserUrn, DataHubClient, DomainUrn, TagUrn\n\nclient = DataHubClient.from_env()\n\ndatabase_key = DatabaseKey(\n    platform="snowflake",\n    instance="production",\n    database="analytics_db",\n)\n\ncontainer = client.entities.get(ContainerUrn.from_string(database_key.as_urn()))\n\ncontainer.set_display_name("Analytics Database")\ncontainer.set_description(\n    "Main analytics database containing reporting and metrics data"\n)\ncontainer.set_subtype("Database")\ncontainer.set_external_url("https://app.snowflake.com/analytics_db")\n\ncontainer.set_tags([TagUrn("production"), TagUrn("analytics"), TagUrn("pii")])\n\ncontainer.set_terms(["urn:li:glossaryTerm:Finance.ReportingData"])\n\ncontainer.set_owners(\n    [\n        (CorpUserUrn("john.doe"), "DATAOWNER"),\n        (CorpUserUrn("analytics-team"), "TECHNICAL_OWNER"),\n    ]\n)\n\ncontainer.set_domain(DomainUrn("Analytics"))\n\ncontainer.set_links(\n    [\n        (\n            "https://wiki.company.com/analytics-db",\n            "Database Documentation",\n        ),\n        (\n            "https://jira.company.com/ANALYTICS-123",\n            "Setup Ticket",\n        ),\n    ]\n)\n\nclient.entities.update(container)\n\nprint(f"Updated container with comprehensive metadata: {container.urn}")\nprint(f"  - Tags: {len(container.tags or [])} tags")\nprint(f"  - Terms: {len(container.terms or [])} terms")\nprint(f"  - Owners: {len(container.owners or [])} owners")\nprint(f"  - Links: {len(container.links or [])} links")\nprint(f"  - Domain: {container.domain}")\n\n'))),(0,t.yg)("h3",{id:"query-container-via-rest-api"},"Query Container via REST API"),(0,t.yg)("p",null,"Containers can be retrieved using the standard entity retrieval APIs:"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Fetch container entity including all aspects"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-bash"},"curl 'http://localhost:8080/entities/urn%3Ali%3Acontainer%3Ab5e95fce839e7d78151ed7e0a7420d84'\n")),(0,t.yg)("p",null,"The response will include all aspects associated with the container, including properties, ownership, tags, terms, etc.")),(0,t.yg)("p",null,"To find all entities within a container, use the relationships API:"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Find all entities contained within a container"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-bash"},"curl 'http://localhost:8080/relationships?direction=INCOMING&urn=urn%3Ali%3Acontainer%3Ab5e95fce839e7d78151ed7e0a7420d84&types=IsPartOf'\n")),(0,t.yg)("p",null,"This returns all entities (datasets, charts, dashboards, sub-containers) that have this container as their parent.")),(0,t.yg)("h2",{id:"integration-points"},"Integration Points"),(0,t.yg)("h3",{id:"relationship-with-datasets"},"Relationship with Datasets"),(0,t.yg)("p",null,"Datasets are the most common entities contained within containers. The relationship is established through the ",(0,t.yg)("inlineCode",{parentName:"p"},"container")," aspect on the dataset, which points to the container URN."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Dataset links to its parent container (schema)\ndataset = Dataset(\n    platform="snowflake",\n    name="analytics_db.reporting.sales_table",\n    env="PROD",\n    parent_container=schema_key,  # Links to schema container\n)\n')),(0,t.yg)("h3",{id:"hierarchical-navigation"},"Hierarchical Navigation"),(0,t.yg)("p",null,"Containers enable hierarchical navigation in the DataHub UI through parent-child relationships:"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Top-down browsing"),": Users can navigate from databases to schemas to tables"),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Bottom-up breadcrumbs"),": Datasets show their parent containers in breadcrumb trails"),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Browse paths"),": Containers are used to generate browse paths automatically")),(0,t.yg)("h3",{id:"graphql-resolvers"},"GraphQL Resolvers"),(0,t.yg)("p",null,"The container entity has specialized GraphQL resolvers:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"ContainerEntitiesResolver"),": Retrieves all entities (datasets, charts, dashboards, sub-containers) within a container"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"ParentContainersResolver"),": Retrieves the full hierarchy of parent containers for any entity")),(0,t.yg)("p",null,"These resolvers power the UI's hierarchical navigation and container overview pages."),(0,t.yg)("h3",{id:"common-usage-patterns"},"Common Usage Patterns"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Database/Schema Hierarchy"),": Relational databases use Database and Schema containers"),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Project/Dataset Hierarchy"),": BigQuery uses Project and Dataset containers"),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Workspace/Folder Hierarchy"),": BI tools use Workspace containers for organization"),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Bucket/Folder Hierarchy"),": Data lakes use Bucket and Folder containers"),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Catalog/Schema Hierarchy"),": Modern catalogs (Unity, Iceberg) use Catalog and Schema containers")),(0,t.yg)("h2",{id:"notable-exceptions"},"Notable Exceptions"),(0,t.yg)("h3",{id:"guid-stability"},"GUID Stability"),(0,t.yg)("p",null,"Container GUIDs must remain stable across ingestion runs. Since containers are identified by GUID rather than explicit properties in the URN, changing the GUID computation will create a new container entity instead of updating the existing one."),(0,t.yg)("p",null,"When creating custom containers, ensure that the properties used to generate the GUID are:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Stable across time"),(0,t.yg)("li",{parentName:"ul"},"Unique within the platform"),(0,t.yg)("li",{parentName:"ul"},"Derived from immutable source system identifiers")),(0,t.yg)("h3",{id:"self-referential-containers"},"Self-Referential Containers"),(0,t.yg)("p",null,"While containers can contain other containers, be careful not to create circular references. The parent-child relationship should form a directed acyclic graph (DAG), not a cycle."),(0,t.yg)("h3",{id:"environment-handling"},"Environment Handling"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"env")," field in ContainerKey has special handling for backwards compatibility. In some sources, the platform instance was incorrectly set to the environment value. The ",(0,t.yg)("inlineCode",{parentName:"p"},"backcompat_env_as_instance")," flag handles this case."),(0,t.yg)("p",null,"When using the ",(0,t.yg)("inlineCode",{parentName:"p"},"env")," field:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Set it to a valid FabricType (PROD, DEV, QA, etc.)"),(0,t.yg)("li",{parentName:"ul"},"Don't use it for platform instance identification"),(0,t.yg)("li",{parentName:"ul"},"Use the separate ",(0,t.yg)("inlineCode",{parentName:"li"},"instance")," field for multi-instance deployments")),(0,t.yg)("h3",{id:"platform-instance-association"},"Platform Instance Association"),(0,t.yg)("p",null,"Unlike datasets which embed platform instance in their URN, containers associate platform instances through the ",(0,t.yg)("inlineCode",{parentName:"p"},"dataPlatformInstance")," aspect. This allows containers to be associated with specific instances of a data platform while maintaining a stable GUID."),(0,t.yg)("h3",{id:"access-control"},"Access Control"),(0,t.yg)("p",null,"Containers support the ",(0,t.yg)("inlineCode",{parentName:"p"},"access")," aspect, which can be used to model access control policies at the container level. This is particularly useful for:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Database-level permissions"),(0,t.yg)("li",{parentName:"ul"},"Schema-level access control"),(0,t.yg)("li",{parentName:"ul"},"Project-level authorization"),(0,t.yg)("li",{parentName:"ul"},"Workspace-level security")),(0,t.yg)("p",null,"Access controls set on containers can be inherited by contained entities, though this behavior depends on the specific platform's implementation."),(0,t.yg)("h2",{id:"technical-reference"},"Technical Reference"),(0,t.yg)("p",null,"For technical details about fields, searchability, and relationships, view the ",(0,t.yg)("strong",{parentName:"p"},"Columns")," tab in DataHub."))}u.isMDXComponent=!0}}]);