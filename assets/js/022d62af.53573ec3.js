"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[54234],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>m});var i=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),d=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=d(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=d(n),p=a,m=u["".concat(l,".").concat(p)]||u[p]||g[p]||s;return n?i.createElement(m,r(r({ref:t},c),{},{components:n})):i.createElement(m,r({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,r=new Array(s);r[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:a,r[1]=o;for(var d=2;d<s;d++)r[d]=n[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7829:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>d,toc:()=>u});n(96540);var i=n(15680);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function r(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const o={sidebar_position:26,title:"Incident",slug:"/generated/metamodel/entities/incident-datahub",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/incident-datahub.md"},l="Incident",d={unversionedId:"docs/generated/metamodel/entities/incident-datahub",id:"docs/generated/metamodel/entities/incident-datahub",title:"Incident",description:"Incidents represent data quality issues, operational problems, or any other type of issue that affects data assets in DataHub. They provide a structured way to track, manage, and resolve problems across datasets, dashboards, charts, data flows, data jobs, and schema fields. Incidents help teams maintain data reliability by documenting problems, assigning responsibility, tracking resolution progress, and maintaining an audit trail of data quality events.",source:"@site/genDocs/docs/generated/metamodel/entities/incident-datahub.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/incident-datahub",permalink:"/docs/generated/metamodel/entities/incident-datahub",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/incident-datahub.md",tags:[],version:"current",sidebarPosition:26,frontMatter:{sidebar_position:26,title:"Incident",slug:"/generated/metamodel/entities/incident-datahub",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/incident-datahub.md"},sidebar:"overviewSidebar",previous:{title:"VersionSet",permalink:"/docs/generated/metamodel/entities/versionset"},next:{title:"Incident",permalink:"/docs/generated/metamodel/entities/incident"}},c={},u=[{value:"Identity",id:"identity",level:2},{value:"Important Capabilities",id:"important-capabilities",level:2},{value:"Incident Types",id:"incident-types",level:3},{value:"Incident Status and Lifecycle",id:"incident-status-and-lifecycle",level:3},{value:"Status State",id:"status-state",level:4},{value:"Lifecycle Stages",id:"lifecycle-stages",level:4},{value:"Priority Levels",id:"priority-levels",level:3},{value:"Assignees",id:"assignees",level:3},{value:"Affected Entities",id:"affected-entities",level:3},{value:"Incident Source",id:"incident-source",level:3},{value:"Temporal Tracking",id:"temporal-tracking",level:3},{value:"Tags",id:"tags",level:3},{value:"Code Examples",id:"code-examples",level:2},{value:"Create an Incident",id:"create-an-incident",level:3},{value:"Update Incident Status",id:"update-incident-status",level:3},{value:"Add Tags to an Incident",id:"add-tags-to-an-incident",level:3},{value:"Query Incident via REST API",id:"query-incident-via-rest-api",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"Relationship with Assertions",id:"relationship-with-assertions",level:3},{value:"Incidents Summary on Assets",id:"incidents-summary-on-assets",level:3},{value:"GraphQL Operations",id:"graphql-operations",level:3},{value:"Authorization",id:"authorization",level:3},{value:"Health Status",id:"health-status",level:3},{value:"Notable Exceptions",id:"notable-exceptions",level:2},{value:"Single vs. Multiple Affected Entities",id:"single-vs-multiple-affected-entities",level:3},{value:"Priority Field Type",id:"priority-field-type",level:3},{value:"Automatic vs. Manual Incidents",id:"automatic-vs-manual-incidents",level:3},{value:"Status Message Length",id:"status-message-length",level:3},{value:"Incident Retention",id:"incident-retention",level:3},{value:"Technical Reference",id:"technical-reference",level:2}],g={toc:u},p="wrapper";function m(e){var{components:t}=e,n=r(e,["components"]);return(0,i.yg)(p,s(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),i.forEach((function(t){a(e,t,n[t])}))}return e}({},g,n),{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"incident"},"Incident"),(0,i.yg)("p",null,"Incidents represent data quality issues, operational problems, or any other type of issue that affects data assets in DataHub. They provide a structured way to track, manage, and resolve problems across datasets, dashboards, charts, data flows, data jobs, and schema fields. Incidents help teams maintain data reliability by documenting problems, assigning responsibility, tracking resolution progress, and maintaining an audit trail of data quality events."),(0,i.yg)("h2",{id:"identity"},"Identity"),(0,i.yg)("p",null,"Incidents are uniquely identified by a generated UUID string. Unlike most other DataHub entities that derive their identity from external systems, incidents are created within DataHub and assigned a unique identifier at creation time."),(0,i.yg)("p",null,"The URN structure for an incident is:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"urn:li:incident:<uuid>\n")),(0,i.yg)("p",null,"Example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"urn:li:incident:a1b2c3d4-e5f6-4a5b-8c9d-0e1f2a3b4c5d\n")),(0,i.yg)("p",null,"The UUID is automatically generated by the system when an incident is raised, ensuring global uniqueness across all incidents in the DataHub instance."),(0,i.yg)("h2",{id:"important-capabilities"},"Important Capabilities"),(0,i.yg)("h3",{id:"incident-types"},"Incident Types"),(0,i.yg)("p",null,"Incidents can be categorized by type to help teams understand the nature of the problem. DataHub supports several predefined incident types as well as custom types:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"FRESHNESS"),": Triggered when data is not updated within expected time windows. Often raised by freshness assertions that detect stale data."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"VOLUME"),": Raised when data volume falls outside expected ranges (too much or too little data). Typically generated by volume assertions."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"FIELD"),": Indicates issues with specific field values, such as null values, invalid formats, or values outside acceptable ranges. Associated with field-level assertions."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"SQL"),": Triggered by SQL-based assertions that validate data using custom queries."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"DATA_SCHEMA"),": Raised when schema changes are detected, such as column additions, removals, or type changes."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"OPERATIONAL"),": General operational incidents such as pipeline failures, permission issues, or system errors."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"CUSTOM"),": User-defined incident types for organization-specific problems. When using CUSTOM type, you must provide a ",(0,i.yg)("inlineCode",{parentName:"li"},"customType")," string to describe the incident category.")),(0,i.yg)("h3",{id:"incident-status-and-lifecycle"},"Incident Status and Lifecycle"),(0,i.yg)("p",null,"Incidents follow a lifecycle from creation through resolution, tracked through status and stage fields:"),(0,i.yg)("h4",{id:"status-state"},"Status State"),(0,i.yg)("p",null,"The top-level state indicates whether an incident is active or resolved:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"ACTIVE"),": The incident is ongoing and requires attention or action."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"RESOLVED"),": The incident has been addressed and is no longer active.")),(0,i.yg)("h4",{id:"lifecycle-stages"},"Lifecycle Stages"),(0,i.yg)("p",null,"Incidents can be assigned to specific stages that represent where they are in the resolution process:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"TRIAGE"),": The impact and priority of the incident is being actively assessed. This is typically the first stage for newly reported incidents."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"INVESTIGATION"),": The root cause of the incident is being investigated by the assigned team."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"WORK_IN_PROGRESS"),": The incident is in the remediation stage, with active work happening to resolve the issue."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"FIXED"),": The incident has been resolved through corrective action (completed remediation)."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"NO_ACTION_REQUIRED"),": The incident is resolved with no action required, for example if it was a false positive, expected behavior, or resolved itself.")),(0,i.yg)("p",null,"The status also includes a ",(0,i.yg)("inlineCode",{parentName:"p"},"message")," field for providing context about the current state and a ",(0,i.yg)("inlineCode",{parentName:"p"},"lastUpdated")," timestamp tracking when the status was last modified."),(0,i.yg)("h3",{id:"priority-levels"},"Priority Levels"),(0,i.yg)("p",null,"Incidents can be assigned a priority to help teams triage and focus on the most critical issues:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"CRITICAL")," (priority 0): Severe issues requiring immediate attention that significantly impact business operations or data quality."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"HIGH")," (priority 1): Important issues that should be addressed promptly but are not immediately blocking."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"MEDIUM")," (priority 2): Moderate issues that should be addressed in the normal course of work."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"LOW")," (priority 3): Minor issues that can be addressed when time permits.")),(0,i.yg)("p",null,"The priority field is stored as an integer (0-3) in the data model, allowing for programmatic sorting and filtering."),(0,i.yg)("h3",{id:"assignees"},"Assignees"),(0,i.yg)("p",null,"Incidents can be assigned to one or more users or groups responsible for investigating and resolving the issue. Each assignee includes:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"actor"),": The URN of the user (corpUser) or group (corpGroup) assigned to the incident."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"assignedAt"),": An audit stamp capturing who made the assignment and when it occurred.")),(0,i.yg)("p",null,"Multiple assignees can collaborate on resolving a single incident, making it easy to involve cross-functional teams."),(0,i.yg)("h3",{id:"affected-entities"},"Affected Entities"),(0,i.yg)("p",null,"A key feature of incidents is the ability to link them to one or more affected data assets. The ",(0,i.yg)("inlineCode",{parentName:"p"},"entities")," field contains an array of URNs referencing the assets impacted by the incident. Supported entity types include:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"dataset"),": Tables, views, streams, or other data collections"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"chart"),": Data visualizations"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"dashboard"),": Dashboard pages containing multiple charts"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"dataFlow"),": Pipelines or workflows"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"dataJob"),": Individual tasks or jobs within a pipeline"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"schemaField"),": Specific fields/columns within a dataset")),(0,i.yg)("p",null,"This linkage allows users to see all incidents affecting a particular asset and understand the scope of an incident across multiple assets."),(0,i.yg)("h3",{id:"incident-source"},"Incident Source"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"source")," field tracks how the incident was created:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"MANUAL"),": The incident was manually created by a user through the UI or API."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"ASSERTION_FAILURE"),": The incident was automatically raised by a failed assertion. In this case, the ",(0,i.yg)("inlineCode",{parentName:"li"},"sourceUrn")," field contains the URN of the assertion that triggered the incident.")),(0,i.yg)("p",null,"This distinction helps teams understand which incidents require manual investigation versus those generated by automated monitoring."),(0,i.yg)("h3",{id:"temporal-tracking"},"Temporal Tracking"),(0,i.yg)("p",null,"Incidents maintain detailed temporal information:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"startedAt"),": The time when the incident actually began (may be earlier than when it was reported)."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"created"),": An audit stamp tracking who created the incident and when it was first reported."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"lastUpdated"),": An audit stamp on the status tracking the most recent status change.")),(0,i.yg)("p",null,"This temporal data helps teams understand incident timelines, calculate mean time to detection (MTTD), and mean time to resolution (MTTR)."),(0,i.yg)("h3",{id:"tags"},"Tags"),(0,i.yg)("p",null,"Like other DataHub entities, incidents can be tagged using the ",(0,i.yg)("inlineCode",{parentName:"p"},"globalTags")," aspect. Tags help categorize and filter incidents, making it easier to find related issues or analyze incident patterns by category."),(0,i.yg)("h2",{id:"code-examples"},"Code Examples"),(0,i.yg)("h3",{id:"create-an-incident"},"Create an Incident"),(0,i.yg)("p",null,"The following example demonstrates creating a new incident and associating it with a dataset that has a data quality issue."),(0,i.yg)("details",null,(0,i.yg)("summary",null,"Python SDK: Create a basic incident"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'# metadata-ingestion/examples/library/incident_create.py\nimport logging\nimport os\nimport uuid\n\nimport datahub.emitter.mce_builder as builder\nimport datahub.metadata.schema_classes as models\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata._urns.urn_defs import IncidentUrn\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Configuration\ngms_endpoint = os.getenv("DATAHUB_GMS_URL", "http://localhost:8080")\ntoken = os.getenv("DATAHUB_GMS_TOKEN")\nemitter = DatahubRestEmitter(gms_server=gms_endpoint, token=token)\n\n# Generate a unique incident ID\nincident_id = str(uuid.uuid4())\nincident_urn = IncidentUrn(incident_id)\n\n# Create the dataset URN that this incident affects\ndataset_urn = builder.make_dataset_urn(\n    platform="snowflake", name="analytics.sales_fact", env="PROD"\n)\n\n# Get the current actor URN for audit stamps\nactor_urn = builder.make_user_urn("datahub")\naudit_stamp = models.AuditStampClass(\n    time=int(builder.get_sys_time() * 1000),\n    actor=actor_urn,\n)\n\n# Create the incident info aspect\nincident_info = models.IncidentInfoClass(\n    type=models.IncidentTypeClass.FRESHNESS,\n    title="Sales data not updated in 48 hours",\n    description="The sales_fact table has not been refreshed since 2023-10-15. Expected daily updates are missing, which may impact downstream reporting and dashboards.",\n    entities=[dataset_urn],\n    status=models.IncidentStatusClass(\n        state=models.IncidentStateClass.ACTIVE,\n        stage=models.IncidentStageClass.TRIAGE,\n        message="Investigating potential pipeline failure",\n        lastUpdated=audit_stamp,\n    ),\n    priority=0,  # CRITICAL priority (0=CRITICAL, 1=HIGH, 2=MEDIUM, 3=LOW)\n    source=models.IncidentSourceClass(type=models.IncidentSourceTypeClass.MANUAL),\n    created=audit_stamp,\n)\n\n# Create and emit the metadata change proposal\nmetadata_change_proposal = MetadataChangeProposalWrapper(\n    entityUrn=str(incident_urn),\n    aspect=incident_info,\n)\n\nemitter.emit(metadata_change_proposal)\nlog.info(f"Created incident {incident_urn} for dataset {dataset_urn}")\nlog.info(\n    f"Incident details: type={incident_info.type}, priority={incident_info.priority}, status={incident_info.status.state}"\n)\n\n'))),(0,i.yg)("h3",{id:"update-incident-status"},"Update Incident Status"),(0,i.yg)("p",null,"As incidents progress through their lifecycle, you'll need to update their status to reflect the current state and stage."),(0,i.yg)("details",null,(0,i.yg)("summary",null,"Python SDK: Update incident status and stage"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'# metadata-ingestion/examples/library/incident_update_status.py\nimport logging\n\nimport datahub.emitter.mce_builder as builder\nimport datahub.metadata.schema_classes as models\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.ingestion.graph.client import DatahubClientConfig, DataHubGraph\nfrom datahub.metadata.urns import IncidentUrn\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Configuration\ngms_endpoint = "http://localhost:8080"\nemitter = DatahubRestEmitter(gms_server=gms_endpoint, extra_headers={})\ngraph = DataHubGraph(DatahubClientConfig(server=gms_endpoint))\n\n# Specify the incident to update (use the incident ID from incident_create.py)\nincident_id = "a1b2c3d4-e5f6-4a5b-8c9d-0e1f2a3b4c5d"\nincident_urn = IncidentUrn(incident_id)\n\n# Retrieve the current incident info to preserve other fields\ncurrent_incident_info = graph.get_aspect(\n    entity_urn=str(incident_urn),\n    aspect_type=models.IncidentInfoClass,\n)\n\nif not current_incident_info:\n    raise ValueError(f"Incident {incident_urn} not found")\n\n# Get the current actor URN for audit stamps\nactor_urn = builder.make_user_urn("jdoe")\naudit_stamp = models.AuditStampClass(\n    time=int(builder.get_sys_time() * 1000),\n    actor=actor_urn,\n)\n\n# Update the status to reflect progress in resolving the incident\ncurrent_incident_info.status = models.IncidentStatusClass(\n    state=models.IncidentStateClass.ACTIVE,\n    stage=models.IncidentStageClass.WORK_IN_PROGRESS,\n    message="Pipeline has been restarted. Monitoring for successful completion.",\n    lastUpdated=audit_stamp,\n)\n\n# Optionally update priority if severity assessment changed\ncurrent_incident_info.priority = (\n    1  # HIGH priority (0=CRITICAL, 1=HIGH, 2=MEDIUM, 3=LOW)\n)\n\n# Optionally assign team members to work on the incident\nassignee1 = models.IncidentAssigneeClass(\n    actor=builder.make_user_urn("jdoe"),\n    assignedAt=audit_stamp,\n)\nassignee2 = models.IncidentAssigneeClass(\n    actor=builder.make_user_urn("asmith"),\n    assignedAt=audit_stamp,\n)\ncurrent_incident_info.assignees = [assignee1, assignee2]\n\n# Create and emit the metadata change proposal\nmetadata_change_proposal = MetadataChangeProposalWrapper(\n    entityUrn=str(incident_urn),\n    aspect=current_incident_info,\n)\n\nemitter.emit(metadata_change_proposal)\nlog.info(\n    f"Updated incident {incident_urn} status to {current_incident_info.status.state}"\n)\nlog.info(\n    f"Status details: stage={current_incident_info.status.stage}, message={current_incident_info.status.message}"\n)\nlog.info(f"Priority updated to {current_incident_info.priority}")\nlog.info(f"Assigned to {len(current_incident_info.assignees)} team members")\n\n'))),(0,i.yg)("h3",{id:"add-tags-to-an-incident"},"Add Tags to an Incident"),(0,i.yg)("p",null,"Tags can be added to incidents to categorize them by team, system, severity, or any other organizational dimension."),(0,i.yg)("details",null,(0,i.yg)("summary",null,"Python SDK: Add a tag to an incident"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'# metadata-ingestion/examples/library/incident_add_tag.py\nimport logging\n\nimport datahub.emitter.mce_builder as builder\nimport datahub.metadata.schema_classes as models\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.ingestion.graph.client import DatahubClientConfig, DataHubGraph\nfrom datahub.metadata.urns import IncidentUrn\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Configuration\ngms_endpoint = "http://localhost:8080"\nemitter = DatahubRestEmitter(gms_server=gms_endpoint, extra_headers={})\ngraph = DataHubGraph(DatahubClientConfig(server=gms_endpoint))\n\n# Specify the incident to tag (use the incident ID from incident_create.py)\nincident_id = "a1b2c3d4-e5f6-4a5b-8c9d-0e1f2a3b4c5d"\nincident_urn = IncidentUrn(incident_id)\n\n# Create the tag URN\ntag_urn = builder.make_tag_urn("data-quality")\n\n# Get the current actor URN for audit stamps\nactor_urn = builder.make_user_urn("datahub")\naudit_stamp = models.AuditStampClass(\n    time=int(builder.get_sys_time() * 1000),\n    actor=actor_urn,\n)\n\n# Read current tags to preserve existing ones\ncurrent_tags = graph.get_aspect(\n    entity_urn=str(incident_urn),\n    aspect_type=models.GlobalTagsClass,\n)\n\n# Create tag association\ntag_association = models.TagAssociationClass(\n    tag=tag_urn,\n    context="incident_categorization",\n)\n\nif current_tags:\n    # Check if tag already exists\n    tag_exists = any(existing_tag.tag == tag_urn for existing_tag in current_tags.tags)\n    if not tag_exists:\n        current_tags.tags.append(tag_association)\n        updated_tags = current_tags\n    else:\n        log.info(f"Tag {tag_urn} already exists on incident {incident_urn}")\n        updated_tags = current_tags\nelse:\n    # No existing tags, create new GlobalTags aspect\n    updated_tags = models.GlobalTagsClass(tags=[tag_association])\n\n# Create and emit the metadata change proposal\nmetadata_change_proposal = MetadataChangeProposalWrapper(\n    entityUrn=str(incident_urn),\n    aspect=updated_tags,\n)\n\nemitter.emit(metadata_change_proposal)\nlog.info(f"Added tag {tag_urn} to incident {incident_urn}")\nlog.info(f"Incident now has {len(updated_tags.tags)} tag(s)")\n\n'))),(0,i.yg)("h3",{id:"query-incident-via-rest-api"},"Query Incident via REST API"),(0,i.yg)("p",null,"After creating incidents, you can retrieve them using the DataHub REST API to integrate with external monitoring or ticketing systems."),(0,i.yg)("details",null,(0,i.yg)("summary",null,"Query incident using REST API"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'# metadata-ingestion/examples/library/incident_query_rest_api.py\nimport logging\nimport os\n\nimport requests\n\nimport datahub.metadata.schema_classes as models\nfrom datahub.ingestion.graph.client import DatahubClientConfig, DataHubGraph\nfrom datahub.metadata._urns.urn_defs import IncidentUrn\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Configuration\ngms_endpoint = os.getenv("DATAHUB_GMS_URL", "http://localhost:8080")\ntoken = os.getenv("DATAHUB_GMS_TOKEN")\ngraph = DataHubGraph(DatahubClientConfig(server=gms_endpoint, token=token))\n\n# Specify the incident to query (use the incident ID from incident_create.py)\nincident_id = "a1b2c3d4-e5f6-4a5b-8c9d-0e1f2a3b4c5d"\nincident_urn = IncidentUrn(incident_id)\n\n# Query the incident info aspect\nincident_info = graph.get_aspect(\n    entity_urn=str(incident_urn),\n    aspect_type=models.IncidentInfoClass,\n)\n\nif incident_info:\n    log.info(f"Incident: {incident_urn}")\n    log.info(f"  Type: {incident_info.type}")\n    log.info(f"  Title: {incident_info.title}")\n    log.info(f"  Description: {incident_info.description}")\n    log.info(f"  Priority: {incident_info.priority}")\n    log.info(f"  Status State: {incident_info.status.state}")\n    log.info(f"  Status Stage: {incident_info.status.stage}")\n    log.info(f"  Status Message: {incident_info.status.message}")\n    log.info(f"  Affected Entities: {len(incident_info.entities)}")\n    for entity_urn in incident_info.entities:\n        log.info(f"    - {entity_urn}")\n\n    if incident_info.assignees:\n        log.info(f"  Assignees: {len(incident_info.assignees)}")\n        for assignee in incident_info.assignees:\n            log.info(f"    - {assignee.actor}")\n\n    if incident_info.source:\n        log.info(f"  Source Type: {incident_info.source.type}")\n        if incident_info.source.sourceUrn:\n            log.info(f"  Source URN: {incident_info.source.sourceUrn}")\n\n    log.info(\n        f"  Created: {incident_info.created.time} by {incident_info.created.actor}"\n    )\n    log.info(\n        f"  Last Updated: {incident_info.status.lastUpdated.time} by {incident_info.status.lastUpdated.actor}"\n    )\nelse:\n    log.warning(f"Incident {incident_urn} not found")\n\n# Query the tags aspect\ntags = graph.get_aspect(\n    entity_urn=str(incident_urn),\n    aspect_type=models.GlobalTagsClass,\n)\n\nif tags:\n    log.info(f"  Tags: {len(tags.tags)}")\n    for tag_association in tags.tags:\n        log.info(f"    - {tag_association.tag}")\n\n# Alternative: Use the REST API directly with requests\n# This approach is useful for integration with external systems\n\n# Query incident entity using the REST API\nheaders = {"Content-Type": "application/json"}\nif token:\n    headers["Authorization"] = f"Bearer {token}"\n\nresponse = requests.get(\n    f"{gms_endpoint}/entities/{incident_urn}",\n    headers=headers,\n)\n\nif response.status_code == 200:\n    entity_data = response.json()\n    log.info("\\nREST API Response:")\n    log.info(f"  Entity URN: {entity_data.get(\'urn\')}")\n    log.info(f"  Aspects: {list(entity_data.get(\'aspects\', {}).keys())}")\nelse:\n    log.error(f"Failed to query incident via REST API: {response.status_code}")\n\n'))),(0,i.yg)("h2",{id:"integration-points"},"Integration Points"),(0,i.yg)("h3",{id:"relationship-with-assertions"},"Relationship with Assertions"),(0,i.yg)("p",null,"Incidents are tightly integrated with DataHub's assertion framework. When assertions (data quality checks) fail and are configured to raise incidents, they automatically create incident entities. These incidents:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Reference the assertion that triggered them via the ",(0,i.yg)("inlineCode",{parentName:"li"},"sourceUrn")," field"),(0,i.yg)("li",{parentName:"ul"},"Inherit the type from the assertion (FRESHNESS, VOLUME, FIELD, SQL, DATA_SCHEMA)"),(0,i.yg)("li",{parentName:"ul"},"Link to the assets being monitored by the assertion"),(0,i.yg)("li",{parentName:"ul"},"Can be configured at the assertion level to control whether failures generate incidents")),(0,i.yg)("p",null,"This integration provides automatic incident creation for monitored data quality checks."),(0,i.yg)("h3",{id:"incidents-summary-on-assets"},"Incidents Summary on Assets"),(0,i.yg)("p",null,"DataHub entities that can have incidents (datasets, dashboards, charts, dataFlows, dataJobs, schemaFields) include an ",(0,i.yg)("inlineCode",{parentName:"p"},"incidentsSummary")," aspect. This aspect provides:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"A count of active incidents affecting the entity"),(0,i.yg)("li",{parentName:"ul"},"A count of resolved incidents"),(0,i.yg)("li",{parentName:"ul"},"The priority breakdown of active incidents"),(0,i.yg)("li",{parentName:"ul"},"Quick access to incident details without querying the incident entities directly")),(0,i.yg)("p",null,"This summary appears in the UI on asset pages, giving users immediate visibility into data quality issues."),(0,i.yg)("h3",{id:"graphql-operations"},"GraphQL Operations"),(0,i.yg)("p",null,"The DataHub GraphQL API provides several operations for working with incidents:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"raiseIncident"),": Creates a new incident with specified type, priority, status, and affected entities"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"updateIncident"),": Updates incident properties including title, description, status, priority, assignees, and affected entities"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"updateIncidentStatus"),": Specifically updates the status state and stage of an incident"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"entityIncidents"),": Queries all incidents affecting a particular entity")),(0,i.yg)("p",null,"These operations are used by the DataHub UI and can be called directly by external applications."),(0,i.yg)("h3",{id:"authorization"},"Authorization"),(0,i.yg)("p",null,"Incident operations respect DataHub's authorization model. Users must have the ",(0,i.yg)("inlineCode",{parentName:"p"},"EDIT_ENTITY_INCIDENTS")," privilege on an entity to:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Create incidents affecting that entity"),(0,i.yg)("li",{parentName:"ul"},"Update incidents linked to that entity"),(0,i.yg)("li",{parentName:"ul"},"Change the status of incidents affecting that entity")),(0,i.yg)("p",null,"This ensures that only users with appropriate permissions can manage incidents for sensitive data assets."),(0,i.yg)("h3",{id:"health-status"},"Health Status"),(0,i.yg)("p",null,"Incidents factor into the overall health status of DataHub entities. Assets with active CRITICAL or HIGH priority incidents may be marked as unhealthy in the UI, helping users quickly identify problematic data assets."),(0,i.yg)("h2",{id:"notable-exceptions"},"Notable Exceptions"),(0,i.yg)("h3",{id:"single-vs-multiple-affected-entities"},"Single vs. Multiple Affected Entities"),(0,i.yg)("p",null,"While the data model supports incidents affecting multiple entities (via the ",(0,i.yg)("inlineCode",{parentName:"p"},"entities")," array), some GraphQL resolvers currently have limitations when working with multi-entity incidents. Specifically, the ",(0,i.yg)("inlineCode",{parentName:"p"},"UpdateIncidentStatusResolver")," currently only checks authorization against the first entity in the array. This is noted in the code as a TODO for future enhancement."),(0,i.yg)("p",null,"When creating incidents, it's recommended to:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Use multiple entities when they're all affected by the same root cause (e.g., all downstream datasets affected by an upstream data quality issue)"),(0,i.yg)("li",{parentName:"ul"},"Be aware that users need appropriate permissions on all affected entities to update the incident"),(0,i.yg)("li",{parentName:"ul"},"Consider the UI implications of multi-entity incidents when displaying incident details")),(0,i.yg)("h3",{id:"priority-field-type"},"Priority Field Type"),(0,i.yg)("p",null,"The priority field is stored as an integer (0-3) rather than as an enum in the PDL model. This was noted in the schema comments as a potential area for future improvement. The GraphQL layer provides an enum interface (CRITICAL, HIGH, MEDIUM, LOW) that maps to these integer values, but the underlying storage uses integers."),(0,i.yg)("p",null,"When working with the low-level SDK, use the integer values:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"0 = CRITICAL"),(0,i.yg)("li",{parentName:"ul"},"1 = HIGH"),(0,i.yg)("li",{parentName:"ul"},"2 = MEDIUM"),(0,i.yg)("li",{parentName:"ul"},"3 = LOW")),(0,i.yg)("h3",{id:"automatic-vs-manual-incidents"},"Automatic vs. Manual Incidents"),(0,i.yg)("p",null,"Incidents created automatically by assertion failures cannot have their ",(0,i.yg)("inlineCode",{parentName:"p"},"source")," field changed to MANUAL, and vice versa. The source field is set at creation time and reflects the origin of the incident. This distinction is important for reporting and analytics, as it helps teams understand the effectiveness of automated monitoring versus manual incident reporting."),(0,i.yg)("h3",{id:"status-message-length"},"Status Message Length"),(0,i.yg)("p",null,"While there is no explicit length limit on the status ",(0,i.yg)("inlineCode",{parentName:"p"},"message")," field in the schema, UI components may truncate very long messages. It's recommended to keep status messages concise (under 500 characters) and use the incident ",(0,i.yg)("inlineCode",{parentName:"p"},"description")," field for longer explanations."),(0,i.yg)("h3",{id:"incident-retention"},"Incident Retention"),(0,i.yg)("p",null,"Incidents are not automatically deleted when their affected entities are removed. This preserves the historical record of data quality issues even after assets are deprecated or deleted. However, this can lead to orphaned incidents that reference non-existent entities. It's recommended to implement cleanup processes for incidents linked to deleted assets if this becomes an issue in your organization."),(0,i.yg)("h2",{id:"technical-reference"},"Technical Reference"),(0,i.yg)("p",null,"For technical details about fields, searchability, and relationships, view the ",(0,i.yg)("strong",{parentName:"p"},"Columns")," tab in DataHub."))}m.isMDXComponent=!0}}]);