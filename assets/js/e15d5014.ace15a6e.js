"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[27918],{15680:(e,n,a)=>{a.d(n,{xA:()=>g,yg:()=>u});var r=a(96540);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,r,t=function(e,n){if(null==e)return{};var a,r,t={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var l=r.createContext({}),d=function(e){var n=r.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},g=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var a=e.components,t=e.mdxType,i=e.originalType,l=e.parentName,g=s(e,["components","mdxType","originalType","parentName"]),p=d(a),y=t,u=p["".concat(l,".").concat(y)]||p[y]||c[y]||i;return a?r.createElement(u,o(o({ref:n},g),{},{components:a})):r.createElement(u,o({ref:n},g))}));function u(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=a.length,o=new Array(i);o[0]=y;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:t,o[1]=s;for(var d=2;d<i;d++)o[d]=a[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}y.displayName="MDXCreateElement"},4691:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>g,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>d,toc:()=>p});a(96540);var r=a(15680);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))})),e}function o(e,n){if(null==e)return{};var a,r,t=function(e,n){if(null==e)return{};var a,r,t={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}const s={sidebar_position:15,title:"GlossaryNode",slug:"/generated/metamodel/entities/glossarynode-datahub",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/glossaryNode-datahub.md"},l="GlossaryNode",d={unversionedId:"docs/generated/metamodel/entities/glossaryNode-datahub",id:"docs/generated/metamodel/entities/glossaryNode-datahub",title:"GlossaryNode",description:"A GlossaryNode represents a hierarchical grouping or category within DataHub's Business Glossary. GlossaryNodes act as folders or containers that organize GlossaryTerms into a logical structure, making it easier to navigate and manage large business glossaries.",source:"@site/genDocs/docs/generated/metamodel/entities/glossaryNode-datahub.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/glossarynode-datahub",permalink:"/docs/generated/metamodel/entities/glossarynode-datahub",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/glossaryNode-datahub.md",tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_position:15,title:"GlossaryNode",slug:"/generated/metamodel/entities/glossarynode-datahub",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/glossaryNode-datahub.md"},sidebar:"overviewSidebar",previous:{title:"GlossaryTerm",permalink:"/docs/generated/metamodel/entities/glossaryterm"},next:{title:"GlossaryNode",permalink:"/docs/generated/metamodel/entities/glossarynode"}},g={},p=[{value:"Identity",id:"identity",level:2},{value:"URN Structure",id:"urn-structure",level:3},{value:"Examples",id:"examples",level:3},{value:"Best Practices for Node Names",id:"best-practices-for-node-names",level:3},{value:"Important Capabilities",id:"important-capabilities",level:2},{value:"Core Node Information (glossaryNodeInfo)",id:"core-node-information-glossarynodeinfo",level:3},{value:"Hierarchical Structure",id:"hierarchical-structure",level:3},{value:"Ownership and Governance",id:"ownership-and-governance",level:3},{value:"Documentation and Links",id:"documentation-and-links",level:3},{value:"Code Examples",id:"code-examples",level:2},{value:"Creating a GlossaryNode",id:"creating-a-glossarynode",level:3},{value:"Managing Hierarchy",id:"managing-hierarchy",level:3},{value:"Adding Ownership",id:"adding-ownership",level:3},{value:"Querying GlossaryNodes",id:"querying-glossarynodes",level:3},{value:"Bulk Operations",id:"bulk-operations",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"Relationship with GlossaryTerm",id:"relationship-with-glossaryterm",level:3},{value:"Parent-Child Relationships",id:"parent-child-relationships",level:3},{value:"GraphQL API",id:"graphql-api",level:3},{value:"Access Control and Permissions",id:"access-control-and-permissions",level:3},{value:"Manage Direct Glossary Children",id:"manage-direct-glossary-children",level:4},{value:"Manage All Glossary Children",id:"manage-all-glossary-children",level:4},{value:"Global Privilege: Manage Glossaries",id:"global-privilege-manage-glossaries",level:4},{value:"Integration with Search and Discovery",id:"integration-with-search-and-discovery",level:3},{value:"Notable Exceptions",id:"notable-exceptions",level:2},{value:"Node Name vs Display Name",id:"node-name-vs-display-name",level:3},{value:"Circular References Not Allowed",id:"circular-references-not-allowed",level:3},{value:"Root-Level Nodes",id:"root-level-nodes",level:3},{value:"Deleting Nodes with Children",id:"deleting-nodes-with-children",level:3},{value:"Display Properties",id:"display-properties",level:3},{value:"No Direct Application to Assets",id:"no-direct-application-to-assets",level:3},{value:"Moving Nodes Affects All Descendants",id:"moving-nodes-affects-all-descendants",level:3},{value:"Technical Reference",id:"technical-reference",level:2}],c={toc:p},y="wrapper";function u(e){var{components:n}=e,a=o(e,["components"]);return(0,r.yg)(y,i(function(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{},r=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),r.forEach((function(n){t(e,n,a[n])}))}return e}({},c,a),{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"glossarynode"},"GlossaryNode"),(0,r.yg)("p",null,"A GlossaryNode represents a hierarchical grouping or category within DataHub's Business Glossary. GlossaryNodes act as folders or containers that organize GlossaryTerms into a logical structure, making it easier to navigate and manage large business glossaries."),(0,r.yg)("p",null,"In practice, GlossaryNodes allow you to:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Create hierarchical categories for organizing business terminology"),(0,r.yg)("li",{parentName:"ul"},"Build multi-level taxonomies (e.g., Finance > Revenue > Recurring Revenue)"),(0,r.yg)("li",{parentName:"ul"},"Establish ownership and governance over specific glossary sections"),(0,r.yg)("li",{parentName:"ul"},"Apply metadata consistently across related terms within a category"),(0,r.yg)("li",{parentName:"ul"},"Manage permissions at the category level")),(0,r.yg)("p",null,'For example, you might create a GlossaryNode called "Finance" containing terms like "Revenue", "Profit", and "EBITDA", with a nested GlossaryNode "Compliance" underneath containing "SOX", "GDPR", and "CCPA" terms.'),(0,r.yg)("h2",{id:"identity"},"Identity"),(0,r.yg)("p",null,"GlossaryNodes are uniquely identified by a single field: their ",(0,r.yg)("strong",{parentName:"p"},"name"),". This name serves as the persistent identifier for the node throughout its lifecycle."),(0,r.yg)("h3",{id:"urn-structure"},"URN Structure"),(0,r.yg)("p",null,"The URN (Uniform Resource Name) for a GlossaryNode follows this pattern:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"urn:li:glossaryNode:<node_name>\n")),(0,r.yg)("p",null,"Where:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"<node_name>"),': A unique string identifier for the node. This can be human-readable (e.g., "Finance") or a generated ID (e.g., "fin-category-001" or a UUID).')),(0,r.yg)("h3",{id:"examples"},"Examples"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"# Simple node name\nurn:li:glossaryNode:Finance\n\n# Hierarchical naming convention (common pattern)\nurn:li:glossaryNode:Finance.Revenue\nurn:li:glossaryNode:Classification\nurn:li:glossaryNode:Classification.DataSensitivity\n\n# UUID-based identifier\nurn:li:glossaryNode:41516e31-0acb-fd90-76ff-fc2c98d2d1a3\n\n# Descriptive identifier\nurn:li:glossaryNode:PersonalInformation\n")),(0,r.yg)("h3",{id:"best-practices-for-node-names"},"Best Practices for Node Names"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Use hierarchical notation"),": Prefix nodes with their parent category (e.g., ",(0,r.yg)("inlineCode",{parentName:"li"},"Finance.Revenue"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"Classification.PII"),") to indicate structure even though the name is flat."),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Be consistent"),": Choose a naming convention (camelCase, dot notation, etc.) and apply it uniformly across your glossary."),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Keep it permanent"),": The node name is the identifier and should not change. Use the ",(0,r.yg)("inlineCode",{parentName:"li"},"name")," field in ",(0,r.yg)("inlineCode",{parentName:"li"},"glossaryNodeInfo")," for the display name."),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Consider depth"),": While nesting is supported, keep hierarchies manageable (typically 2-4 levels deep) for usability.")),(0,r.yg)("h2",{id:"important-capabilities"},"Important Capabilities"),(0,r.yg)("h3",{id:"core-node-information-glossarynodeinfo"},"Core Node Information (glossaryNodeInfo)"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"glossaryNodeInfo")," aspect contains the essential information about a glossary node:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"definition")," (required): A description of what this node/category represents. This helps users understand the purpose and scope of terms within this node."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"name"),': The display name shown in the UI. This can be more human-friendly than the URN identifier (e.g., "Financial Metrics" vs. "FinancialMetrics").'),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"parentNode"),": A reference to another GlossaryNode that acts as the parent in the hierarchy. This creates the tree structure visible in the UI."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"id"),": An optional identifier field that can store an external reference or alternate ID."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"customProperties"),": Key-value pairs for additional metadata specific to your organization.")),(0,r.yg)("p",null,"Example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'{\n  "name": "Financial Metrics",\n  "definition": "Category for all financial and accounting-related business terms including revenue, costs, and profitability measures.",\n  "parentNode": "urn:li:glossaryNode:Finance"\n}\n')),(0,r.yg)("h3",{id:"hierarchical-structure"},"Hierarchical Structure"),(0,r.yg)("p",null,"GlossaryNodes support arbitrary nesting through the ",(0,r.yg)("inlineCode",{parentName:"p"},"parentNode")," field, creating tree structures:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"GlossaryNode: DataGovernance\n  \u251c\u2500\u2500 GlossaryNode: Classification\n  \u2502   \u251c\u2500\u2500 GlossaryTerm: Public\n  \u2502   \u251c\u2500\u2500 GlossaryTerm: Internal\n  \u2502   \u2514\u2500\u2500 GlossaryTerm: Confidential\n  \u2502\n  \u251c\u2500\u2500 GlossaryNode: PersonalInformation\n  \u2502   \u251c\u2500\u2500 GlossaryNode: DirectIdentifiers\n  \u2502   \u2502   \u251c\u2500\u2500 GlossaryTerm: Email\n  \u2502   \u2502   \u2514\u2500\u2500 GlossaryTerm: SSN\n  \u2502   \u2514\u2500\u2500 GlossaryNode: IndirectIdentifiers\n  \u2502       \u251c\u2500\u2500 GlossaryTerm: IPAddress\n  \u2502       \u2514\u2500\u2500 GlossaryTerm: DeviceID\n  \u2502\n  \u2514\u2500\u2500 GlossaryNode: Compliance\n      \u251c\u2500\u2500 GlossaryTerm: GDPR\n      \u2514\u2500\u2500 GlossaryTerm: CCPA\n")),(0,r.yg)("p",null,"Key characteristics:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"A GlossaryNode can have at most one parent node (single inheritance)"),(0,r.yg)("li",{parentName:"ul"},"A GlossaryNode can contain both GlossaryTerms and child GlossaryNodes"),(0,r.yg)("li",{parentName:"ul"},"Nodes at the root level (no parent) appear at the top of the glossary hierarchy"),(0,r.yg)("li",{parentName:"ul"},"Moving a node automatically moves all its descendants")),(0,r.yg)("h3",{id:"ownership-and-governance"},"Ownership and Governance"),(0,r.yg)("p",null,"GlossaryNodes support standard ownership metadata through the ",(0,r.yg)("inlineCode",{parentName:"p"},"ownership")," aspect. Ownership at the node level can represent:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Stewardship responsibility for maintaining the category and its terms"),(0,r.yg)("li",{parentName:"ul"},"Subject matter expertise for the business domain"),(0,r.yg)("li",{parentName:"ul"},"Accountability for term quality and accuracy within the category")),(0,r.yg)("p",null,"Ownership is particularly powerful for GlossaryNodes because:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Owners can be granted special permissions (Manage Direct Children, Manage All Children)"),(0,r.yg)("li",{parentName:"ul"},"Ownership can cascade to terms within the node"),(0,r.yg)("li",{parentName:"ul"},"It establishes clear accountability for glossary sections")),(0,r.yg)("h3",{id:"documentation-and-links"},"Documentation and Links"),(0,r.yg)("p",null,"GlossaryNodes support the ",(0,r.yg)("inlineCode",{parentName:"p"},"institutionalMemory")," aspect, allowing you to:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Link to external documentation (Confluence pages, wikis, etc.)"),(0,r.yg)("li",{parentName:"ul"},"Reference governance policies or standards"),(0,r.yg)("li",{parentName:"ul"},"Point to training materials or style guides"),(0,r.yg)("li",{parentName:"ul"},"Maintain a history of important links related to the category")),(0,r.yg)("p",null,"This is especially useful for top-level nodes representing major domains or initiatives."),(0,r.yg)("h2",{id:"code-examples"},"Code Examples"),(0,r.yg)("h3",{id:"creating-a-glossarynode"},"Creating a GlossaryNode"),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Python SDK: Create a root-level GlossaryNode"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'import logging\nimport os\n\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata._urns.urn_defs import GlossaryNodeUrn\nfrom datahub.metadata.schema_classes import GlossaryNodeInfoClass\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Create a GlossaryNode URN\nnode_urn = GlossaryNodeUrn("Finance")\n\n# Create the glossary node info with definition and display name\nnode_info = GlossaryNodeInfoClass(\n    definition="Category for all financial and accounting-related business terms including revenue, costs, and profitability measures.",\n    name="Financial Metrics",\n)\n\n# Create metadata change proposal\nevent: MetadataChangeProposalWrapper = MetadataChangeProposalWrapper(\n    entityUrn=str(node_urn),\n    aspect=node_info,\n)\n\n# Emit to DataHub\ngms_server = os.getenv("DATAHUB_GMS_URL", "http://localhost:8080")\ntoken = os.getenv("DATAHUB_GMS_TOKEN")\nrest_emitter = DatahubRestEmitter(gms_server=gms_server, token=token)\nrest_emitter.emit(event)\n\nlog.info(f"Created glossary node {node_urn}")\n\n'))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Python SDK: Create a nested GlossaryNode with parent"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'import logging\nimport os\n\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata._urns.urn_defs import GlossaryNodeUrn\nfrom datahub.metadata.schema_classes import GlossaryNodeInfoClass\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# First, ensure the parent node exists (Finance)\nparent_node_urn = GlossaryNodeUrn("Finance")\nparent_node_info = GlossaryNodeInfoClass(\n    definition="Top-level category for financial metrics and terms",\n    name="Finance",\n)\n\nparent_event = MetadataChangeProposalWrapper(\n    entityUrn=str(parent_node_urn),\n    aspect=parent_node_info,\n)\n\n# Create a nested child node under Finance\nchild_node_urn = GlossaryNodeUrn("RevenueMetrics")\nchild_node_info = GlossaryNodeInfoClass(\n    definition="Metrics related to revenue recognition and reporting",\n    name="Revenue Metrics",\n    parentNode=str(parent_node_urn),  # Set the parent relationship\n)\n\nchild_event = MetadataChangeProposalWrapper(\n    entityUrn=str(child_node_urn),\n    aspect=child_node_info,\n)\n\n# Emit both to DataHub\nrest_emitter = DatahubRestEmitter(\n    gms_server=os.getenv("DATAHUB_GMS_URL", "http://localhost:8080"),\n    token=os.getenv("DATAHUB_GMS_TOKEN"),\n)\nrest_emitter.emit(parent_event)\nrest_emitter.emit(child_event)\n\nlog.info(f"Created parent glossary node {parent_node_urn}")\nlog.info(f"Created child glossary node {child_node_urn} under {parent_node_urn}")\n\n'))),(0,r.yg)("h3",{id:"managing-hierarchy"},"Managing Hierarchy"),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Python SDK: Build a multi-level glossary hierarchy"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'import logging\nimport os\n\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata._urns.urn_defs import GlossaryNodeUrn, GlossaryTermUrn\nfrom datahub.metadata.schema_classes import (\n    GlossaryNodeInfoClass,\n    GlossaryTermInfoClass,\n)\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Create a multi-level glossary hierarchy:\n# DataGovernance\n#   \u251c\u2500\u2500 Classification\n#   \u2502   \u251c\u2500\u2500 Public (term)\n#   \u2502   \u2514\u2500\u2500 Confidential (term)\n#   \u2514\u2500\u2500 PersonalInformation\n#       \u251c\u2500\u2500 Email (term)\n#       \u2514\u2500\u2500 SSN (term)\n\nrest_emitter = DatahubRestEmitter(\n    gms_server=os.getenv("DATAHUB_GMS_URL", "http://localhost:8080"),\n    token=os.getenv("DATAHUB_GMS_TOKEN"),\n)\n\n# Level 1: Root node\nroot_urn = GlossaryNodeUrn("DataGovernance")\nroot_info = GlossaryNodeInfoClass(\n    definition="Top-level governance structure for data classification and management",\n    name="Data Governance",\n)\nrest_emitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=str(root_urn),\n        aspect=root_info,\n    )\n)\nlog.info(f"Created root node: {root_urn}")\n\n# Level 2: Child nodes\nclassification_urn = GlossaryNodeUrn("Classification")\nclassification_info = GlossaryNodeInfoClass(\n    definition="Data classification categories",\n    name="Classification",\n    parentNode=str(root_urn),\n)\nrest_emitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=str(classification_urn),\n        aspect=classification_info,\n    )\n)\nlog.info(f"Created child node: {classification_urn}")\n\npii_urn = GlossaryNodeUrn("PersonalInformation")\npii_info = GlossaryNodeInfoClass(\n    definition="Personal and sensitive data categories",\n    name="Personal Information",\n    parentNode=str(root_urn),\n)\nrest_emitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=str(pii_urn),\n        aspect=pii_info,\n    )\n)\nlog.info(f"Created child node: {pii_urn}")\n\n# Level 3: Terms under Classification\npublic_term_urn = GlossaryTermUrn("Public")\npublic_term_info = GlossaryTermInfoClass(\n    definition="Publicly available data with no restrictions",\n    termSource="INTERNAL",\n    name="Public",\n    parentNode=str(classification_urn),\n)\nrest_emitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=str(public_term_urn),\n        aspect=public_term_info,\n    )\n)\nlog.info(f"Created term: {public_term_urn}")\n\nconfidential_term_urn = GlossaryTermUrn("Confidential")\nconfidential_term_info = GlossaryTermInfoClass(\n    definition="Restricted access data for internal use only",\n    termSource="INTERNAL",\n    name="Confidential",\n    parentNode=str(classification_urn),\n)\nrest_emitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=str(confidential_term_urn),\n        aspect=confidential_term_info,\n    )\n)\nlog.info(f"Created term: {confidential_term_urn}")\n\n# Level 3: Terms under PersonalInformation\nemail_term_urn = GlossaryTermUrn("Email")\nemail_term_info = GlossaryTermInfoClass(\n    definition="Email addresses that can identify individuals",\n    termSource="INTERNAL",\n    name="Email Address",\n    parentNode=str(pii_urn),\n)\nrest_emitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=str(email_term_urn),\n        aspect=email_term_info,\n    )\n)\nlog.info(f"Created term: {email_term_urn}")\n\nssn_term_urn = GlossaryTermUrn("SSN")\nssn_term_info = GlossaryTermInfoClass(\n    definition="Social Security Numbers - highly sensitive personal identifiers",\n    termSource="INTERNAL",\n    name="Social Security Number",\n    parentNode=str(pii_urn),\n)\nrest_emitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=str(ssn_term_urn),\n        aspect=ssn_term_info,\n    )\n)\nlog.info(f"Created term: {ssn_term_urn}")\n\nlog.info("Successfully created glossary hierarchy with nodes and terms")\n\n'))),(0,r.yg)("h3",{id:"adding-ownership"},"Adding Ownership"),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Python SDK: Add an owner to a GlossaryNode"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'import logging\n\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata._urns.urn_defs import CorpUserUrn, GlossaryNodeUrn\nfrom datahub.metadata.schema_classes import (\n    OwnerClass,\n    OwnershipClass,\n    OwnershipTypeClass,\n)\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Create a glossary node URN\nnode_urn = GlossaryNodeUrn("Finance")\n\n# Define the owner\nowner_urn = CorpUserUrn("jdoe")\n\n# Create ownership aspect\n# This makes jdoe a TECHNICAL_OWNER of the Finance glossary node\nownership = OwnershipClass(\n    owners=[\n        OwnerClass(\n            owner=str(owner_urn),\n            type=OwnershipTypeClass.TECHNICAL_OWNER,\n        )\n    ]\n)\n\n# Create the metadata change proposal\nevent = MetadataChangeProposalWrapper(\n    entityUrn=str(node_urn),\n    aspect=ownership,\n)\n\n# Emit to DataHub\nrest_emitter = DatahubRestEmitter(gms_server="http://localhost:8080")\nrest_emitter.emit(event)\n\nlog.info(f"Added owner {owner_urn} to glossary node {node_urn}")\n\n'))),(0,r.yg)("h3",{id:"querying-glossarynodes"},"Querying GlossaryNodes"),(0,r.yg)("details",null,(0,r.yg)("summary",null,"REST API: Get a GlossaryNode by URN"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"# Fetch a GlossaryNode entity\ncurl -X GET 'http://localhost:8080/entities/urn%3Ali%3AglossaryNode%3AFinance' \\\n  -H 'Authorization: Bearer <token>'\n\n# Response includes all aspects:\n# - glossaryNodeKey (identity)\n# - glossaryNodeInfo (definition, name, parentNode, etc.)\n# - ownership (who owns this node)\n# - institutionalMemory (links to documentation)\n# - etc.\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"GraphQL: Query root-level GlossaryNodes"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},"query GetRootGlossaryNodes {\n  getRootGlossaryNodes {\n    nodes {\n      urn\n      properties {\n        name\n        definition\n      }\n      ownership {\n        owners {\n          owner {\n            ... on CorpUser {\n              urn\n              username\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"GraphQL: Query children of a GlossaryNode"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},'query GetGlossaryNodeChildren {\n  glossaryNode(urn: "urn:li:glossaryNode:Finance") {\n    urn\n    properties {\n      name\n      definition\n    }\n    children {\n      count\n      relationships {\n        entity {\n          ... on GlossaryNode {\n            urn\n            properties {\n              name\n            }\n          }\n          ... on GlossaryTerm {\n            urn\n            properties {\n              name\n              definition\n            }\n          }\n        }\n      }\n    }\n  }\n}\n'))),(0,r.yg)("h3",{id:"bulk-operations"},"Bulk Operations"),(0,r.yg)("details",null,(0,r.yg)("summary",null,"YAML Ingestion: Create node hierarchy from Business Glossary file"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'# business_glossary.yml\nversion: "1"\nsource: MyOrganization\nowners:\n  users:\n    - datahub\nnodes:\n  - name: DataGovernance\n    description: Top-level governance structure\n    nodes:\n      - name: Classification\n        description: Data classification categories\n        terms:\n          - name: Public\n            description: Publicly available data\n          - name: Internal\n            description: Internal use only\n          - name: Confidential\n            description: Restricted access data\n\n      - name: PersonalInformation\n        description: Personal and sensitive data categories\n        nodes:\n          - name: DirectIdentifiers\n            description: Direct personal identifiers\n            terms:\n              - name: Email\n                description: Email addresses\n              - name: SSN\n                description: Social Security Numbers\n\n          - name: IndirectIdentifiers\n            description: Indirect identifiers\n            terms:\n              - name: IPAddress\n                description: Internet Protocol addresses\n              - name: DeviceID\n                description: Device identifiers\n# Ingest using the DataHub CLI:\n# datahub ingest -c business_glossary.yml\n')),(0,r.yg)("p",null,"See the ",(0,r.yg)("a",{parentName:"p",href:"/docs/generated/ingestion/sources/business-glossary"},"Business Glossary Source")," documentation for the full YAML format specification.")),(0,r.yg)("h2",{id:"integration-points"},"Integration Points"),(0,r.yg)("h3",{id:"relationship-with-glossaryterm"},"Relationship with GlossaryTerm"),(0,r.yg)("p",null,"GlossaryNodes provide organizational structure for GlossaryTerms. The relationship is established through:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"GlossaryTerm \u2192 GlossaryNode"),": A term's ",(0,r.yg)("inlineCode",{parentName:"li"},"glossaryTermInfo.parentNode")," field references its containing node"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Navigation"),": The UI renders this as a browsable hierarchy where users can expand nodes to see contained terms"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Search"),": Users can filter by glossary node to find all terms within a category")),(0,r.yg)("p",null,"Think of this relationship as:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"GlossaryNode"),": Folder/directory (can contain terms and other nodes)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"GlossaryTerm"),": File (the actual business definition)")),(0,r.yg)("h3",{id:"parent-child-relationships"},"Parent-Child Relationships"),(0,r.yg)("p",null,"GlossaryNodes form a tree structure through self-referential parent-child relationships:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"A child node references its parent via ",(0,r.yg)("inlineCode",{parentName:"li"},"glossaryNodeInfo.parentNode")),(0,r.yg)("li",{parentName:"ul"},"A parent node can have many children (both nodes and terms)"),(0,r.yg)("li",{parentName:"ul"},"The DataHub UI displays this as an expandable tree in the glossary browser"),(0,r.yg)("li",{parentName:"ul"},"GraphQL resolvers provide specialized queries for traversing the hierarchy")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Key operations:")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"getRootGlossaryNodes"),": Fetch all top-level nodes (no parent)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"parentNodes"),": Navigate upward to find all ancestors"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"children"),": Navigate downward to find immediate children"),(0,r.yg)("li",{parentName:"ul"},"Moving a node updates its ",(0,r.yg)("inlineCode",{parentName:"li"},"parentNode")," reference and affects the entire subtree")),(0,r.yg)("h3",{id:"graphql-api"},"GraphQL API"),(0,r.yg)("p",null,"The GraphQL API provides specialized operations for GlossaryNodes:"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Queries:")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"glossaryNode(urn)"),": Fetch a specific node with children"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"getRootGlossaryNodes"),": Get all root-level nodes"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},'search(entity: "glossaryNode")'),": Search nodes by name/definition")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Mutations:")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"createGlossaryNode"),": Create a new node with optional parent"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"updateParentNode"),": Move a node to a different parent"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"updateName"),": Update the display name"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"updateDescription"),": Update the definition")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Resolvers:")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"children"),": Fetch immediate children (nodes and terms)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"childrenCount"),": Count of children under this node"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"parentNodes"),": Fetch ancestor path from node to root")),(0,r.yg)("p",null,"See the ",(0,r.yg)("a",{parentName:"p",href:"/docs/glossary/business-glossary"},"Business Glossary documentation")," for UI operations."),(0,r.yg)("h3",{id:"access-control-and-permissions"},"Access Control and Permissions"),(0,r.yg)("p",null,"GlossaryNodes support fine-grained access control through special glossary-specific privileges:"),(0,r.yg)("h4",{id:"manage-direct-glossary-children"},"Manage Direct Glossary Children"),(0,r.yg)("p",null,"Users with this privilege on a node can:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Create new terms and nodes directly under this node"),(0,r.yg)("li",{parentName:"ul"},"Edit terms and nodes directly under this node"),(0,r.yg)("li",{parentName:"ul"},"Delete terms and nodes directly under this node"),(0,r.yg)("li",{parentName:"ul"},"Cannot affect grandchildren or deeper descendants")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Use case"),": Department leads managing their immediate category structure"),(0,r.yg)("h4",{id:"manage-all-glossary-children"},"Manage All Glossary Children"),(0,r.yg)("p",null,"Users with this privilege on a node can:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Create, edit, and delete any term or node in the entire subtree"),(0,r.yg)("li",{parentName:"ul"},"Manage nested hierarchies of any depth"),(0,r.yg)("li",{parentName:"ul"},"Full control over the category and all descendants")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Use case"),": Data governance team managing an entire domain (e.g., all PII-related terms)"),(0,r.yg)("h4",{id:"global-privilege-manage-glossaries"},"Global Privilege: Manage Glossaries"),(0,r.yg)("p",null,"Users with this platform-level privilege can:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Manage any node or term across the entire glossary"),(0,r.yg)("li",{parentName:"ul"},"Create root-level nodes"),(0,r.yg)("li",{parentName:"ul"},"Full administrative control")),(0,r.yg)("p",null,"These privileges are checked hierarchically - if you have permission on a parent node, it may grant permissions on children depending on the privilege type."),(0,r.yg)("h3",{id:"integration-with-search-and-discovery"},"Integration with Search and Discovery"),(0,r.yg)("p",null,"While GlossaryNodes don't get applied to data assets directly (that's the role of GlossaryTerms), they enhance discoverability by:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Faceted Navigation"),": Users can browse the glossary hierarchy to find relevant terms"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Context"),": The node structure provides semantic grouping that helps users understand term relationships"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Filtering"),": Search interfaces can filter terms by their containing node"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Autocomplete"),": Node structure influences term suggestions and grouping")),(0,r.yg)("h2",{id:"notable-exceptions"},"Notable Exceptions"),(0,r.yg)("h3",{id:"node-name-vs-display-name"},"Node Name vs Display Name"),(0,r.yg)("p",null,"Similar to GlossaryTerms, the URN identifier (",(0,r.yg)("inlineCode",{parentName:"p"},"name")," in ",(0,r.yg)("inlineCode",{parentName:"p"},"glossaryNodeKey"),") is separate from the display name (",(0,r.yg)("inlineCode",{parentName:"p"},"name")," in ",(0,r.yg)("inlineCode",{parentName:"p"},"glossaryNodeInfo"),"):"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"URN name"),': Use a stable, unchanging identifier (e.g., "finance-001", "DataGovernance")'),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Display name"),': Use a human-friendly label that can be updated (e.g., "Financial Metrics", "Data Governance")')),(0,r.yg)("p",null,"This separation allows you to rename nodes in the UI without breaking references."),(0,r.yg)("h3",{id:"circular-references-not-allowed"},"Circular References Not Allowed"),(0,r.yg)("p",null,"The hierarchy must be a tree structure (directed acyclic graph):"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"A node cannot be its own ancestor"),(0,r.yg)("li",{parentName:"ul"},"Moving a node under one of its descendants is prevented"),(0,r.yg)("li",{parentName:"ul"},"DataHub validates the hierarchy to prevent cycles")),(0,r.yg)("p",null,"If you attempt to create a circular reference, the operation will fail with a validation error."),(0,r.yg)("h3",{id:"root-level-nodes"},"Root-Level Nodes"),(0,r.yg)("p",null,"Nodes with no parent (",(0,r.yg)("inlineCode",{parentName:"p"},"parentNode")," is null or not set) appear at the root level of the glossary:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"These represent top-level categories"),(0,r.yg)("li",{parentName:"ul"},"Creating root-level nodes may require higher privileges"),(0,r.yg)("li",{parentName:"ul"},"Root nodes typically represent major domains or organizational divisions")),(0,r.yg)("h3",{id:"deleting-nodes-with-children"},"Deleting Nodes with Children"),(0,r.yg)("p",null,"Current behavior (subject to change):"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"DataHub may require nodes to be empty before deletion")),(0,r.yg)("li",{parentName:"ul"},"You must first delete or move all child nodes and terms"),(0,r.yg)("li",{parentName:"ul"},"This prevents accidental loss of large glossary sections")),(0,r.yg)("p",null,"Best practice: Always move or reassign children before deleting a node, or use bulk operations that handle the entire subtree."),(0,r.yg)("h3",{id:"display-properties"},"Display Properties"),(0,r.yg)("p",null,"GlossaryNodes support the ",(0,r.yg)("inlineCode",{parentName:"p"},"displayProperties")," aspect (added in newer versions), which provides additional UI customization:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Custom icons or colors for the node"),(0,r.yg)("li",{parentName:"ul"},"Display order hints"),(0,r.yg)("li",{parentName:"ul"},"UI-specific rendering preferences")),(0,r.yg)("p",null,"This is an optional enhancement for organizations that want more visual control over their glossary."),(0,r.yg)("h3",{id:"no-direct-application-to-assets"},"No Direct Application to Assets"),(0,r.yg)("p",null,"Unlike GlossaryTerms, GlossaryNodes are ",(0,r.yg)("strong",{parentName:"p"},"not")," directly applied to data assets:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"You cannot tag a dataset with a GlossaryNode"),(0,r.yg)("li",{parentName:"ul"},"Only GlossaryTerms can be applied to datasets, columns, dashboards, etc."),(0,r.yg)("li",{parentName:"ul"},"Nodes exist solely for organizational purposes within the glossary itself")),(0,r.yg)("p",null,"If you need to tag assets with a category, create a GlossaryTerm within that node and apply the term."),(0,r.yg)("h3",{id:"moving-nodes-affects-all-descendants"},"Moving Nodes Affects All Descendants"),(0,r.yg)("p",null,"When you move a node to a new parent:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"All child nodes and terms move with it"),(0,r.yg)("li",{parentName:"ul"},"The entire subtree is relocated"),(0,r.yg)("li",{parentName:"ul"},"References from terms to their parent node are automatically maintained"),(0,r.yg)("li",{parentName:"ul"},"No manual updates to individual terms are needed")),(0,r.yg)("p",null,"This makes reorganization efficient but requires care to avoid unintended moves."),(0,r.yg)("h2",{id:"technical-reference"},"Technical Reference"),(0,r.yg)("p",null,"For technical details about fields, searchability, and relationships, view the ",(0,r.yg)("strong",{parentName:"p"},"Columns")," tab in DataHub."))}u.isMDXComponent=!0}}]);