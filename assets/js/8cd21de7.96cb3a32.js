"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[4677],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},29087:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>m});n(96540);var a=n(15680);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const s={sidebar_position:51,title:"Data Platform Instance",slug:"/generated/metamodel/entities/dataplatforminstance-datahub",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataPlatformInstance-datahub.md"},l="Data Platform Instance",p={unversionedId:"docs/generated/metamodel/entities/dataPlatformInstance-datahub",id:"docs/generated/metamodel/entities/dataPlatformInstance-datahub",title:"Data Platform Instance",description:'A Data Platform Instance represents a specific deployment or instance of a data platform. While a dataPlatform represents a technology type (e.g., MySQL, Snowflake, BigQuery), a dataPlatformInstance represents a particular running instance of that platform (e.g., "production-mysql-cluster", "dev-snowflake-account", "analytics-bigquery-project").',source:"@site/genDocs/docs/generated/metamodel/entities/dataPlatformInstance-datahub.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/dataplatforminstance-datahub",permalink:"/docs/generated/metamodel/entities/dataplatforminstance-datahub",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataPlatformInstance-datahub.md",tags:[],version:"current",sidebarPosition:51,frontMatter:{sidebar_position:51,title:"Data Platform Instance",slug:"/generated/metamodel/entities/dataplatforminstance-datahub",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataPlatformInstance-datahub.md"},sidebar:"overviewSidebar",previous:{title:"DataHubRetention",permalink:"/docs/generated/metamodel/entities/datahubretention"},next:{title:"Data Platform Instance",permalink:"/docs/generated/metamodel/entities/dataplatforminstance"}},c={},m=[{value:"Identity",id:"identity",level:2},{value:"Examples",id:"examples",level:3},{value:"Important Capabilities",id:"important-capabilities",level:2},{value:"Platform Instance Properties",id:"platform-instance-properties",level:3},{value:"Iceberg Warehouse Configuration",id:"iceberg-warehouse-configuration",level:3},{value:"Ownership and Tags",id:"ownership-and-tags",level:3},{value:"Status and Deprecation",id:"status-and-deprecation",level:3},{value:"Code Examples",id:"code-examples",level:2},{value:"Creating a Platform Instance",id:"creating-a-platform-instance",level:3},{value:"Attaching Platform Instance to Datasets",id:"attaching-platform-instance-to-datasets",level:3},{value:"Querying Platform Instances",id:"querying-platform-instances",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"Relationship to Other Entities",id:"relationship-to-other-entities",level:3},{value:"Ingestion Framework Integration",id:"ingestion-framework-integration",level:3},{value:"Usage in Dataset Naming",id:"usage-in-dataset-naming",level:3},{value:"Iceberg Catalog Integration",id:"iceberg-catalog-integration",level:3},{value:"Notable Exceptions",id:"notable-exceptions",level:2},{value:"Internal vs. External Use",id:"internal-vs-external-use",level:3},{value:"Platform Instance vs. Environment",id:"platform-instance-vs-environment",level:3},{value:"Automatic Instance Creation",id:"automatic-instance-creation",level:3},{value:"Limited GraphQL Search",id:"limited-graphql-search",level:3},{value:"Immutable Key Components",id:"immutable-key-components",level:3},{value:"Technical Reference",id:"technical-reference",level:2}],u={toc:m},d="wrapper";function g(e){var{components:t}=e,n=o(e,["components"]);return(0,a.yg)(d,i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){r(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"data-platform-instance"},"Data Platform Instance"),(0,a.yg)("p",null,"A Data Platform Instance represents a specific deployment or instance of a data platform. While a ",(0,a.yg)("a",{parentName:"p",href:"/docs/generated/metamodel/entities/dataplatform"},"dataPlatform"),' represents a technology type (e.g., MySQL, Snowflake, BigQuery), a dataPlatformInstance represents a particular running instance of that platform (e.g., "production-mysql-cluster", "dev-snowflake-account", "analytics-bigquery-project").'),(0,a.yg)("p",null,"This entity is crucial for organizations that run multiple instances of the same platform technology across different environments, regions, or organizational units. It enables DataHub to distinguish between assets from different platform instances and provides a way to organize and manage platform-level metadata and credentials."),(0,a.yg)("h2",{id:"identity"},"Identity"),(0,a.yg)("p",null,"Data Platform Instances are identified by two components:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Platform"),": The URN of the data platform technology (e.g., ",(0,a.yg)("inlineCode",{parentName:"li"},"urn:li:dataPlatform:snowflake"),")"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Instance"),': A unique string identifier for this specific instance (e.g., "prod-us-west-2", "dev-cluster-01")')),(0,a.yg)("p",null,"The complete URN follows the pattern:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"urn:li:dataPlatformInstance:(urn:li:dataPlatform:<platform>,<instance_id>)\n")),(0,a.yg)("h3",{id:"examples"},"Examples"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"urn:li:dataPlatformInstance:(urn:li:dataPlatform:mysql,production-mysql-01)"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"A production MySQL database cluster"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"urn:li:dataPlatformInstance:(urn:li:dataPlatform:snowflake,acme-prod-account)"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"A production Snowflake account"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"urn:li:dataPlatformInstance:(urn:li:dataPlatform:bigquery,analytics-project)"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"A BigQuery project used for analytics"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"urn:li:dataPlatformInstance:(urn:li:dataPlatform:iceberg,data-lake-warehouse)"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"An Iceberg warehouse instance")))),(0,a.yg)("h2",{id:"important-capabilities"},"Important Capabilities"),(0,a.yg)("h3",{id:"platform-instance-properties"},"Platform Instance Properties"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"dataPlatformInstanceProperties")," aspect contains descriptive metadata about the platform instance:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"name"),": A display-friendly name for the instance (searchable, supports autocomplete)"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"description"),": Documentation explaining the purpose, usage, or characteristics of this instance"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"customProperties"),": Key-value pairs for additional custom metadata"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"externalUrl"),": A link to external documentation or management console for this instance")),(0,a.yg)("p",null,"This aspect helps users understand what each platform instance represents and how it should be used."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Python SDK: Create a platform instance with properties"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# metadata-ingestion/examples/library/platform_instance_create.py\nimport os\n\nimport datahub.emitter.mce_builder as builder\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import DataPlatformInstancePropertiesClass\n\n# Create the platform instance URN\nplatform_instance_urn = builder.make_dataplatform_instance_urn(\n    platform="mysql", instance="production-mysql-cluster"\n)\n\n# Define properties for the platform instance\nplatform_properties = DataPlatformInstancePropertiesClass(\n    name="Production MySQL Cluster",\n    description="Primary MySQL database cluster serving production workloads in US West region",\n    customProperties={\n        "region": "us-west-2",\n        "environment": "production",\n        "cluster_size": "3-node",\n        "version": "8.0.35",\n    },\n    externalUrl="https://cloud.mysql.com/console/clusters/prod-cluster",\n)\n\n# Create metadata change proposal\nplatform_instance_mcp = MetadataChangeProposalWrapper(\n    entityUrn=platform_instance_urn,\n    aspect=platform_properties,\n)\n\n# Emit metadata to DataHub\ngms_server = os.getenv("DATAHUB_GMS_URL", "http://localhost:8080")\ntoken = os.getenv("DATAHUB_GMS_TOKEN")\nemitter = DatahubRestEmitter(gms_server=gms_server, token=token)\nemitter.emit_mcp(platform_instance_mcp)\n\nprint(f"Created platform instance: {platform_instance_urn}")\n\n'))),(0,a.yg)("h3",{id:"iceberg-warehouse-configuration"},"Iceberg Warehouse Configuration"),(0,a.yg)("p",null,"DataHub can serve as an Iceberg catalog, managing Iceberg tables through platform instances. The ",(0,a.yg)("inlineCode",{parentName:"p"},"icebergWarehouseInfo")," aspect stores the configuration needed to manage an Iceberg warehouse:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"dataRoot"),": S3 path to the root location for table storage"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"clientId"),": URN reference to the AWS access key ID secret"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"clientSecret"),": URN reference to the AWS secret access key secret"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"region"),": AWS region where the warehouse is located"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"role"),": IAM role ARN used for credential vending"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"tempCredentialExpirationSeconds"),": Expiration time for temporary credentials"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"env"),": Environment/fabric type (PROD, DEV, QA, etc.)")),(0,a.yg)("p",null,"This enables DataHub to manage Iceberg tables as a REST catalog, handling metadata operations and credential vending for data access."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"datahub iceberg")," CLI provides commands to create, update, list, and delete Iceberg warehouses. See the ",(0,a.yg)("a",{parentName:"p",href:"https://datahubproject.io/docs/generated/ingestion/sources/iceberg"},"Iceberg integration documentation")," for details."),(0,a.yg)("h3",{id:"ownership-and-tags"},"Ownership and Tags"),(0,a.yg)("p",null,"Like other DataHub entities, platform instances support:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"ownership"),": Track who owns or manages this platform instance"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"globalTags"),': Apply tags for categorization (e.g., "production", "pci-compliant", "deprecated")'),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"institutionalMemory"),": Add links to runbooks, documentation, or related resources")),(0,a.yg)("p",null,"These aspects enable governance and discoverability of platform instances."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Python SDK: Add metadata to a platform instance"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# metadata-ingestion/examples/library/platform_instance_add_metadata.py\nimport time\n\nimport datahub.emitter.mce_builder as builder\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import (\n    AuditStampClass,\n    GlobalTagsClass,\n    InstitutionalMemoryClass,\n    InstitutionalMemoryMetadataClass,\n    OwnerClass,\n    OwnershipClass,\n    OwnershipTypeClass,\n    TagAssociationClass,\n)\n\n# Create the platform instance URN\nplatform_instance_urn = builder.make_dataplatform_instance_urn(\n    platform="snowflake", instance="acme-prod-account"\n)\n\n# Add ownership\nowners = [\n    OwnerClass(\n        owner=builder.make_user_urn("data-platform-team"),\n        type=OwnershipTypeClass.TECHNICAL_OWNER,\n    ),\n    OwnerClass(\n        owner=builder.make_user_urn("john.doe"),\n        type=OwnershipTypeClass.DATAOWNER,\n    ),\n]\n\nownership_mcp = MetadataChangeProposalWrapper(\n    entityUrn=platform_instance_urn,\n    aspect=OwnershipClass(owners=owners),\n)\n\n# Add tags\ntags = GlobalTagsClass(\n    tags=[\n        TagAssociationClass(tag=builder.make_tag_urn("production")),\n        TagAssociationClass(tag=builder.make_tag_urn("pci-compliant")),\n        TagAssociationClass(tag=builder.make_tag_urn("tier-1")),\n    ]\n)\n\ntags_mcp = MetadataChangeProposalWrapper(\n    entityUrn=platform_instance_urn,\n    aspect=tags,\n)\n\n# Add institutional memory (links)\nlinks = InstitutionalMemoryClass(\n    elements=[\n        InstitutionalMemoryMetadataClass(\n            url="https://wiki.company.com/snowflake-prod-runbook",\n            description="Production Snowflake Runbook",\n            createStamp=AuditStampClass(\n                time=int(time.time() * 1000), actor=builder.make_user_urn("datahub")\n            ),\n        ),\n        InstitutionalMemoryMetadataClass(\n            url="https://wiki.company.com/snowflake-access-guide",\n            description="How to request access to production Snowflake",\n            createStamp=AuditStampClass(\n                time=int(time.time() * 1000), actor=builder.make_user_urn("datahub")\n            ),\n        ),\n    ]\n)\n\nlinks_mcp = MetadataChangeProposalWrapper(\n    entityUrn=platform_instance_urn,\n    aspect=links,\n)\n\n# Emit all metadata changes\nemitter = DatahubRestEmitter("http://localhost:8080")\nemitter.emit_mcp(ownership_mcp)\nemitter.emit_mcp(tags_mcp)\nemitter.emit_mcp(links_mcp)\n\nprint(f"Added ownership, tags, and links to: {platform_instance_urn}")\n\n'))),(0,a.yg)("h3",{id:"status-and-deprecation"},"Status and Deprecation"),(0,a.yg)("p",null,"Platform instances can be marked with status information:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"status"),": Indicates if the instance is active or has been removed"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"deprecation"),": Mark instances as deprecated when they are being phased out, with optional decommission date and migration notes")),(0,a.yg)("p",null,"This helps communicate lifecycle information about platform instances to users."),(0,a.yg)("h2",{id:"code-examples"},"Code Examples"),(0,a.yg)("h3",{id:"creating-a-platform-instance"},"Creating a Platform Instance"),(0,a.yg)("p",null,"The most common way to create platform instances is through the ingestion framework, which automatically creates them when the ",(0,a.yg)("inlineCode",{parentName:"p"},"platform_instance")," configuration is specified in source configs. However, you can also create them programmatically:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Python SDK: Create a data platform instance"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# metadata-ingestion/examples/library/platform_instance_create.py\nimport os\n\nimport datahub.emitter.mce_builder as builder\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import DataPlatformInstancePropertiesClass\n\n# Create the platform instance URN\nplatform_instance_urn = builder.make_dataplatform_instance_urn(\n    platform="mysql", instance="production-mysql-cluster"\n)\n\n# Define properties for the platform instance\nplatform_properties = DataPlatformInstancePropertiesClass(\n    name="Production MySQL Cluster",\n    description="Primary MySQL database cluster serving production workloads in US West region",\n    customProperties={\n        "region": "us-west-2",\n        "environment": "production",\n        "cluster_size": "3-node",\n        "version": "8.0.35",\n    },\n    externalUrl="https://cloud.mysql.com/console/clusters/prod-cluster",\n)\n\n# Create metadata change proposal\nplatform_instance_mcp = MetadataChangeProposalWrapper(\n    entityUrn=platform_instance_urn,\n    aspect=platform_properties,\n)\n\n# Emit metadata to DataHub\ngms_server = os.getenv("DATAHUB_GMS_URL", "http://localhost:8080")\ntoken = os.getenv("DATAHUB_GMS_TOKEN")\nemitter = DatahubRestEmitter(gms_server=gms_server, token=token)\nemitter.emit_mcp(platform_instance_mcp)\n\nprint(f"Created platform instance: {platform_instance_urn}")\n\n'))),(0,a.yg)("h3",{id:"attaching-platform-instance-to-datasets"},"Attaching Platform Instance to Datasets"),(0,a.yg)("p",null,"When ingesting metadata, the ",(0,a.yg)("inlineCode",{parentName:"p"},"dataPlatformInstance")," aspect links datasets to their platform instance. This is typically done by ingestion connectors but can also be done manually:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Python SDK: Attach platform instance to a dataset"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'from datahub.sdk import DataHubClient, DatasetUrn\n\nclient = DataHubClient.from_env()\n\ndataset = client.entities.get(\n    DatasetUrn(\n        platform="mysql",\n        name="production-mysql-cluster.ecommerce.customers",\n        env="PROD",\n    )\n)\n\ndataset._set_platform_instance(platform="mysql", instance="production-mysql-cluster")\n\nclient.entities.update(dataset)\n\nprint("Attached platform instance \'production-mysql-cluster\'")\nprint(f"to dataset {dataset.urn}")\n\n'))),(0,a.yg)("h3",{id:"querying-platform-instances"},"Querying Platform Instances"),(0,a.yg)("p",null,"You can retrieve platform instance information using the REST API or GraphQL:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Python SDK: Query platform instance via REST API"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# metadata-ingestion/examples/library/platform_instance_query.py\nimport json\nimport os\n\nimport datahub.emitter.mce_builder as builder\nfrom datahub.ingestion.graph.client import DatahubClientConfig, DataHubGraph\n\n# Create a DataHub graph client\ngms_server = os.getenv("DATAHUB_GMS_URL", "http://localhost:8080")\ntoken = os.getenv("DATAHUB_GMS_TOKEN")\nconfig = DatahubClientConfig(server=gms_server, token=token)\ngraph = DataHubGraph(config)\n\n# Create the platform instance URN\nplatform_instance_urn = builder.make_dataplatform_instance_urn(\n    platform="mysql", instance="production-mysql-cluster"\n)\n\n# Check if the platform instance exists\nif graph.exists(platform_instance_urn):\n    print(f"Platform instance exists: {platform_instance_urn}\\n")\n\n    # Get the full entity with all aspects\n    entity = graph.get_entity_semityped(platform_instance_urn)\n\n    # Access the key aspect to get platform and instance ID\n    if "dataPlatformInstanceKey" in entity:\n        key_aspect = entity["dataPlatformInstanceKey"]\n        print(f"Platform: {key_aspect.platform}")\n        print(f"Instance ID: {key_aspect.instance}\\n")\n\n    # Access properties\n    if "dataPlatformInstanceProperties" in entity:\n        props = entity["dataPlatformInstanceProperties"]\n        print(f"Name: {props.name}")\n        print(f"Description: {props.description}")\n        if props.customProperties:\n            print("Custom Properties:")\n            for key, value in props.customProperties.items():\n                print(f"  {key}: {value}")\n        if props.externalUrl:\n            print(f"External URL: {props.externalUrl}")\n        print()\n\n    # Access ownership\n    if "ownership" in entity:\n        ownership = entity["ownership"]\n        print("Owners:")\n        for owner in ownership.owners:\n            print(f"  - {owner.owner} ({owner.type})")\n        print()\n\n    # Access tags\n    if "globalTags" in entity:\n        global_tags = entity["globalTags"]\n        print("Tags:")\n        for tag_association in global_tags.tags:\n            print(f"  - {tag_association.tag}")\n        print()\n\n    # Access institutional memory (links)\n    if "institutionalMemory" in entity:\n        institutional_memory = entity["institutionalMemory"]\n        print("Links:")\n        for element in institutional_memory.elements:\n            print(f"  - {element.description}: {element.url}")\n        print()\n\n    # Get raw aspects using REST API for complete data\n    raw_entity = graph.get_entity_raw(\n        entity_urn=platform_instance_urn,\n        aspects=[\n            "dataPlatformInstanceKey",\n            "dataPlatformInstanceProperties",\n            "ownership",\n            "globalTags",\n            "institutionalMemory",\n            "deprecation",\n            "status",\n        ],\n    )\n\n    print("Raw entity data:")\n    print(json.dumps(raw_entity, indent=2))\n\nelse:\n    print(f"Platform instance does not exist: {platform_instance_urn}")\n\n'))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"REST API: Fetch platform instance entity"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"curl 'http://localhost:8080/entities/urn%3Ali%3AdataPlatformInstance%3A(urn%3Ali%3AdataPlatform%3Amysql%2Cproduction-cluster)'\n"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"GraphQL: Search for Iceberg warehouses"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'query {\n  search(\n    input: {\n      type: DATA_PLATFORM_INSTANCE\n      query: "dataPlatform:iceberg"\n      start: 0\n      count: 10\n    }\n  ) {\n    searchResults {\n      entity {\n        ... on DataPlatformInstance {\n          urn\n          platform {\n            name\n          }\n          instanceId\n          properties {\n            name\n            description\n          }\n        }\n      }\n    }\n  }\n}\n'))),(0,a.yg)("h2",{id:"integration-points"},"Integration Points"),(0,a.yg)("h3",{id:"relationship-to-other-entities"},"Relationship to Other Entities"),(0,a.yg)("p",null,"Platform instances are referenced by many entities through the ",(0,a.yg)("inlineCode",{parentName:"p"},"dataPlatformInstance")," aspect:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Datasets"),": Associate datasets with their platform instance, enabling filtering and organization by instance"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Charts"),": BI tool charts can be linked to the specific instance they query"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Dashboards"),": Dashboards are associated with platform instances"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Data Jobs"),": ETL/pipeline jobs reference the platform instance they run on"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Data Flows"),": Pipeline definitions can be associated with platform instances"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"ML Models"),": Models can track which platform instance they were trained on"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Containers"),": Database schemas, folders, and other containers reference their instance"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Assertions"),": Data quality assertions can be scoped to specific instances")),(0,a.yg)("p",null,"This creates a powerful organizational dimension across all data assets."),(0,a.yg)("h3",{id:"ingestion-framework-integration"},"Ingestion Framework Integration"),(0,a.yg)("p",null,"Most DataHub ingestion sources support a ",(0,a.yg)("inlineCode",{parentName:"p"},"platform_instance")," configuration parameter. When specified, the connector automatically attaches the platform instance to all ingested entities:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},'source:\n  type: mysql\n  config:\n    host_port: "mysql.prod.company.com:3306"\n    platform_instance: "production-mysql-cluster"\n    # ... other config\n')),(0,a.yg)("p",null,"The platform instance is then used to:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Distinguish assets from different instances of the same platform"),(0,a.yg)("li",{parentName:"ul"},"Enable instance-level filtering in the UI"),(0,a.yg)("li",{parentName:"ul"},"Support multi-tenant or multi-region deployments"),(0,a.yg)("li",{parentName:"ul"},"Organize metadata by deployment environment")),(0,a.yg)("h3",{id:"usage-in-dataset-naming"},"Usage in Dataset Naming"),(0,a.yg)("p",null,"For platforms that support multiple instances, the platform instance is often incorporated into dataset names to ensure uniqueness. For example:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Without instance: ",(0,a.yg)("inlineCode",{parentName:"li"},"urn:li:dataset:(urn:li:dataPlatform:mysql,db.schema.table,PROD)")),(0,a.yg)("li",{parentName:"ul"},"With instance: ",(0,a.yg)("inlineCode",{parentName:"li"},"urn:li:dataset:(urn:li:dataPlatform:mysql,prod-cluster.db.schema.table,PROD)"))),(0,a.yg)("p",null,"This ensures that tables with the same name across different instances have distinct URNs."),(0,a.yg)("h3",{id:"iceberg-catalog-integration"},"Iceberg Catalog Integration"),(0,a.yg)("p",null,"When DataHub serves as an Iceberg REST catalog, platform instances represent Iceberg warehouses. Each warehouse configuration includes:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Storage credentials for S3 access"),(0,a.yg)("li",{parentName:"ul"},"IAM role configuration for credential vending"),(0,a.yg)("li",{parentName:"ul"},"Warehouse root location in object storage"),(0,a.yg)("li",{parentName:"ul"},"Environment designation")),(0,a.yg)("p",null,"DataHub manages the lifecycle of Iceberg tables within these warehouses, handling:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Table creation and metadata storage"),(0,a.yg)("li",{parentName:"ul"},"Temporary credential generation for read/write access"),(0,a.yg)("li",{parentName:"ul"},"Table discovery and lineage tracking"),(0,a.yg)("li",{parentName:"ul"},"Schema evolution")),(0,a.yg)("p",null,"See the ",(0,a.yg)("inlineCode",{parentName:"p"},"datahub iceberg")," CLI commands for managing Iceberg warehouses as platform instances."),(0,a.yg)("h2",{id:"notable-exceptions"},"Notable Exceptions"),(0,a.yg)("h3",{id:"internal-vs-external-use"},"Internal vs. External Use"),(0,a.yg)("p",null,'Data Platform Instances are categorized as "internal" entities in DataHub\'s entity registry, meaning they are primarily used for organization and metadata management rather than being primary discovery targets. Users typically interact with datasets, dashboards, and other assets rather than directly browsing platform instances.'),(0,a.yg)("p",null,"However, platform instances are searchable and can be viewed in the DataHub UI when investigating asset organization or platform-level configurations."),(0,a.yg)("h3",{id:"platform-instance-vs-environment"},"Platform Instance vs. Environment"),(0,a.yg)("p",null,"Platform instances are distinct from the environment/fabric concept used in entity URNs (PROD, DEV, QA, etc.). While environment is a required part of many entity identifiers, platform instance is optional and provides a finer-grained organizational dimension."),(0,a.yg)("p",null,'A single platform instance typically corresponds to one environment, but you can have multiple instances within the same environment (e.g., "prod-us-west", "prod-us-east", "prod-eu-central" all in PROD environment).'),(0,a.yg)("h3",{id:"automatic-instance-creation"},"Automatic Instance Creation"),(0,a.yg)("p",null,"Platform instances are typically created implicitly during ingestion rather than being explicitly defined beforehand. When an ingestion source references a platform instance that doesn't exist, DataHub will automatically create a basic platform instance entity. You can then enrich it with additional metadata like properties, ownership, and tags."),(0,a.yg)("h3",{id:"limited-graphql-search"},"Limited GraphQL Search"),(0,a.yg)("p",null,"Unlike primary entities like datasets and dashboards, platform instances have limited search functionality in GraphQL. The ",(0,a.yg)("inlineCode",{parentName:"p"},"search")," query with ",(0,a.yg)("inlineCode",{parentName:"p"},"type: DATA_PLATFORM_INSTANCE")," is supported, but some advanced search features may not be fully implemented. REST API access provides full functionality."),(0,a.yg)("h3",{id:"immutable-key-components"},"Immutable Key Components"),(0,a.yg)("p",null,"Once created, a platform instance's key components (platform URN and instance ID) cannot be changed. If you need to rename an instance, you must create a new platform instance entity and migrate references from the old one."),(0,a.yg)("h2",{id:"technical-reference"},"Technical Reference"),(0,a.yg)("p",null,"For technical details about fields, searchability, and relationships, view the ",(0,a.yg)("strong",{parentName:"p"},"Columns")," tab in DataHub."))}g.isMDXComponent=!0}}]);